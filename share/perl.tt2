[%~#
   # Notes
   #
   # IDL has these particularities:
   #
   # * A module can be "reopened".
   #
   #   This is not a problem for perl: it is legal to say:
   #     package test { xxx }
   #
   #   and later:
   #     package test { yyy }
   #
   #   The twos will happily concatenate
   #
   # * The most important chapter of IDL specification is 5.20 about
   #   Scoping rules and Names resolution
   #
~%]
#!env perl

[% 'package dom::_Types {
  use Moose::Role;
  use Moose::Util::TypeConstraints;

  # (c) MooseX::Types::Common::Numeric
  subtype \'dom::_PositiveOrZeroInt\',
    as \'Int\',
      where { $_ >= 0 },
        message { "Must be an integer greater than or equal to zero" },
          ( $Moose::VERSION >= 2.0200
            ? inline_as {
              $_[0]->parent()->_inline_check( $_[1] ) . \' && \'
                . qq{ ($_[1] >= 0) };
            }
            : ()
          );
};' %]

[% # The whole IDL file is describing what is "Role" in Moose terminology
   # Instead of requiring the ScalarUtil, Dumper etc... plugin, the following methods are explicitely provided by the caller:
   # - Scalar::Utils::blessed()
   # - Scalar::Utils::reftype()
   # - Data::Dumper()
   # TT2 does not like blessed arrays, we provide a method that return the content: as_list
   # - as_list()
   #
   # As of time of of this writing, nested namespaces are not supported by MooseX::Declare
   # so they are explicitely setted
   #
~%]
[% PROCESS ast2perl item=ast indent=0 root=[] scope=[] %]
[% nl %]
[%~ RETURN ~%]

[%~# Remember: AST is always a blessed array reference. Every item inside as well, EXCEPT hardcoded lexemes ~%]

[%~ BLOCK printDump ~%]
  [%~ PERL ~%]
    use Data::Dumper;
    print Dumper($stash->get('what'));
  [%~ END ~%]
[%~ END ~%]
[%~ BLOCK getLexeme; lexeme(as_list(item.0));  END ~%]

[%~ BLOCK pushRoot;  root.push(root.size == 0 ? what : '::' _ what);   END ~%]
[%~ BLOCK printRoot; root.join('');            END ~%]
[%~ BLOCK popRoot;   dummy = root.pop();       END ~%]

[%~ BLOCK pushScope;  scope.push('::' _ what); END ~%]
[%~ BLOCK printScope; scope.join('');          END ~%]
[%~ BLOCK popScope;   dummy = scope.pop();     END ~%]

[%~ BLOCK FQDN; INCLUDE printRoot; INCLUDE printScope; root.size == 0 ? what : '::' _ what;  END ~%]
[%~ BLOCK xxxExpr; ~%]
  [%~ rhs = as_list(item) ~%]
  [%~ IF rhs.max == 2 ~%]
    [%~ INCLUDE ast2perl item=rhs.0 %]
    [%~ INCLUDE getLexeme item=rhs.1 ~%]
    [%~ INCLUDE ast2perl item=rhs.2 %]
  [%~ ELSE ~%]
    [%~ INCLUDE ast2perl item=rhs.0 %]
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK ast2perl ~%]
  [% indent = newindent || indent ~%]
  [%~ blessedName = blessed(item) ~%]
  [%~ IF blessedName ~%]
    [%~ SWITCH blessedName ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::module' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.1 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]package [% INCLUDE FQDN what=identifier  %] {
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ INCLUDE pushRoot what=identifier ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent+2) %]use Moose::Role;
[% sp(indent+2) %]use Moose::Util::TypeConstraints;
[% sp(indent+2) %]use MooseX::Interface;
[% sp(indent+2) %]use MooseX::ClassAttribute;
[% sp(indent+2) %]with 'dom::_Types';

[% sp(indent+2) %][% INCLUDE ast2perl item=as_list(item).3 newindent=indent+2 | trim %]
[% sp(indent) %]};
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ INCLUDE popRoot ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::forwardDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]with '[% INCLUDE FQDN what=identifier %]';
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::exceptDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.1 | trim ~%]
        [%~ memberAny = rhs.3 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% nl %]
[% sp(indent) %]package [% INCLUDE FQDN what=identifier %] {
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ INCLUDE pushScope what=identifier ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent+2) %]use Moose::Role;
[% sp(indent+2) %]use Moose::Util::TypeConstraints;
[% sp(indent+2) %]use MooseX::Interface;
[% sp(indent+2) %]use MooseX::ClassAttribute;
[% sp(indent+2) %]with 'dom::_Types';
[% sp(indent+2) %]with 'Throwable';

[% sp(indent+2) %][% INCLUDE ast2perl memberCtx='attribute' item=memberAny newindent=indent+2 | trim %]
[% sp(indent) %]};
[% nl %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ INCLUDE popScope ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::memberList' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Dict[
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ FOREACH member IN rhs ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE ast2perl memberCtx='structure' item=member | trim %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::member' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ typeSpec = INCLUDE ast2perl item=rhs.0 |trim ~%]
        [%~ declarators = INCLUDE ast2perl item=rhs.1 |trim ~%]
        [%~ IF memberCtx == 'attribute' ~%]
          [%~ FOREACH declarator IN declarators.split(', ') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% loop.index() > 0 ? nl : '' %][% sp(indent) %]has '[% declarator %]' => (is => 'rw', isa => [% typeSpec %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ END ~%]
        [%~ ELSIF memberCtx == 'structure' ~%]
          [%~ FOREACH declarator IN declarators.split(', ') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% loop.index() > 0 ? nl : '' %][% sp(indent) %][% declarator %] => [% typeSpec %],
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ END ~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::interfaceHeader' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.2 | trim ~%]
        [%~ interfaceInheritanceSpecMaybe = rhs.3 ~%]
        [%~# We would like the with () on the same line, so it is done explicitely here ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% nl %]
[% sp(indent) %]package [% INCLUDE FQDN what=identifier %] {
[% sp(indent+2) %]use Moose::Role;
[% sp(indent+2) %]use Moose::Util::TypeConstraints;
[% sp(indent+2) %]use MooseX::Interface;
[% sp(indent+2) %]use MooseX::ClassAttribute;
[% sp(indent+2) %]with 'dom::_Types';
[% INCLUDE ast2perl item=interfaceInheritanceSpecMaybe newindent=indent+2 %]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
      [% INCLUDE pushScope what=identifier %]
      [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::interfaceDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ interfaceHeader = rhs.0 ~%]
        [%~ interfaceBody = rhs.2 ~%]
        [%~# interfaceHeader is opening/pushing the scope, increase indent ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]

[% INCLUDE ast2perl item=interfaceHeader %]
[% INCLUDE ast2perl item=interfaceBody newindent=indent+2 %]
[% sp(indent) %]};
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ INCLUDE popScope ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::interfaceNameListMany' ~%]
      [%~################################################ ~%]
        [%~ FOREACH interfaceName IN as_list(item) ~%]
          [%~ scopedName = as_list(interfaceName) ~%]
          [%~# C.f. AST/Value.pm, where concatenation of scopedName is already done, so that scopedName looks like a lexeme ~%]
          [%~# If scopedName begins with '::', this is an absolute scope, otherwise a relative scope ~%]
          [%~ identifier = INCLUDE getLexeme item=scopedName; ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[%~ loop.index() > 0 ? ', ' : ''; ~%]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ IF identifier.match('^::') ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]with '[%~ identifier ~%]';
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ ELSE ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]with '[%~ INCLUDE FQDN what=identifier ~%]';
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ END ~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::declaratorListMany' ~%]
      [%~################################################ ~%]
        [%~ FOREACH rhs IN as_list(item) ~%]
          [%~ declarator = INCLUDE ast2perl item=rhs | trim ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[%~ loop.index() > 0 ? ', ' : ''; ~%]
[%~ declarator ~%]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::typeDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ firstItem = rhs.0 ~%]
        [%~ IF NOT blessed(firstItem) ~%]
          [%~ IF firstItem == 'typedef' ~%]
            [%~ typeDeclarator = rhs.1 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE ast2perl item=typeDeclarator | trim %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
            [%~ RETURN ~%]
          [%~ END ~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::sequenceType' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ simpleTypeSpec = rhs.2 ~%]
        [%~ IF rhs.max == 4 ~%]
          [%~ positiveIntConst = INCLUDE ast2perl item=rhs.4 | trim ~%]
        [%~ ELSE ~%]
          [%~ positiveIntConst = -1 ~%]
        [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'ArrayRef[[%~ INCLUDE ast2perl item=simpleTypeSpec | trim | replace("'", "") ~%]]'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ IF positiveIntConst >= 0 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %], where {scalar(@_) <= [% positiveIntConst %]};
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::stringType' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ IF rhs.max == 3 ~%]
          [%~ positiveIntConst = INCLUDE ast2perl item=rhs.3 | trim ~%]
        [%~ ELSE ~%]
          [%~ positiveIntConst = -1 ~%]
        [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Str'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ IF positiveIntConst >= 0 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% ', where {length($_) <= ' _ positiveIntConst _ '},
  message { "Length must not be <= ' _ positiveIntConst _ '" },
    ( $Moose::VERSION >= 2.0200
        ? inline_as {
            $_[0]->parent()->_inline_check( $_[1] ) . \' && \'
                . qq{ (length($_[1]) > 0) };
        }
        : ()
    );' %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::wideStringType' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ IF rhs.max == 3 ~%]
          [%~ positiveIntConst = INCLUDE ast2perl item=rhs.3 | trim ~%]
        [%~ ELSE ~%]
          [%~ positiveIntConst = -1 ~%]
        [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Str'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ IF positiveIntConst >= 0 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% ', where {length($_) <= ' _ positiveIntConst _ '},
  message { "Length must not be <= ' _ positiveIntConst _ '" },
    ( $Moose::VERSION >= 2.0200
        ? inline_as {
            $_[0]->parent()->_inline_check( $_[1] ) . \' && \'
                . qq{ (length($_[1]) > 0) };
        }
        : ()
    );' %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::floatingPtType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Num'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::signedInt' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Int'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::unsignedInt' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'dom::_PositiveOrZeroInt'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::octetType' ~%]
      [%~# Note: octetType is binary data ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Defined'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::anyType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Any'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::objectType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Object'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::charType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Str'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::wideCharType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Str'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::booleanType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'Bool'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::orExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::xorExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::andExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::shiftExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::addExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::multExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::constDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ constType = INCLUDE ast2perl item=rhs.1 | trim ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.2 | trim ~%]
        [%~ constExp = INCLUDE ast2perl item=rhs.4 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]class_has '[%~ identifier ~%]' => (is => 'ro', isa => [% constType %], default => do {[% constExp ~%]});
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::unaryOperator' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme item=rhs.0 | trim %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::primaryExpr' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ IF rhs.max == 2 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %](
[% INCLUDE ast2perl item=rhs.1 newindent=indent+2 %]
[% sp(indent) %])
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::scopedName' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]'[%~ INCLUDE FQDN what=lexeme(as_list(item)) %]'
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::identifier' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::integerLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::fixedPtLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::floatingPtLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::stringLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]"[% INCLUDE getLexeme %]"
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::wideStringLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]"[% INCLUDE getLexeme %]"
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::characterLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]"[% INCLUDE getLexeme %]"
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::booleanLiteral' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ booleanLiteral = INCLUDE getLexeme item=rhs.0 | trim ~%]
        [%~ IF booleanLiteral == 'TRUE' ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]1
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]0
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
          [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::valueBoxDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.1 | trim ~%]
        [%~ typeSpec = INCLUDE ast2perl item=rhs.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]subtype '[%~ INCLUDE FQDN what=identifier ~%]', as [% typeSpec %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::structType' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.1 | trim ~%]
        [%~ memberList = INCLUDE ast2perl memberCtx='structure' item=rhs.3 newindent=indent+2 | trim %]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]subtype '[%~ INCLUDE FQDN what=identifier ~%]', as '[% memberList %]';
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::typeDeclarator' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ typeSpec = INCLUDE ast2perl item=rhs.0 | trim ~%]
        [%~ declarators = INCLUDE ast2perl item=rhs.1 | trim ~%]
        [%~# We are lucky that only this rule correspond to typedef -; ~%]
        [%~ FOREACH declarator IN declarators.split(', ') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% loop.index() > 0 ? nl : '' %][% sp(indent) %]subtype '[%~ INCLUDE FQDN what=declarator %]', as [% typeSpec %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::readonlyAttrSpec' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ paramTypeSpec = INCLUDE ast2perl item=rhs.2 | trim ~%]
        [%~ readonlyAttrDeclarator = INCLUDE ast2perl item=rhs.3 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]has '[% readonlyAttrDeclarator %]' => (is => 'ro', isa => [% paramTypeSpec %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::attrSpec' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ paramTypeSpec = INCLUDE ast2perl item=rhs.1 | trim ~%]
        [%~ attrDeclarator = INCLUDE ast2perl item=rhs.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]has '[% attrDeclarator %]' => (is => 'rw', isa => [% paramTypeSpec %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~ CASE DEFAULT ~%]

    [%~ END ~%]
    [%~ FOREACH rhs IN as_list(item) ~%]
      [%~ INCLUDE ast2perl item=rhs ~%]
    [%~ END ~%]
  [%~ END ~%]
[%~ END ~%]
