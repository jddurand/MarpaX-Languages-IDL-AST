[%~ USE ScalarUtil ~%]
[%~ USE Dumper ~%]
use MooseX::DeclareX;     # All MooseX::Declare sugar and more
[% PROCESS ast2perl item=ast indent=0 %]

[%~# Remember: AST is always a blessed array reference. Every item inside as well, EXCEPT hardcoded lexemes ~%]
[%~# TT2 does not like blessed arrays, we provide a method that return the content: as_list ~%]

[%~ BLOCK getLexeme ~%]
[%~ lexeme(as_list(item.0)) ~%]
[%~ END ~%]

[%~ BLOCK ast2perl ~%]
  [%~ blessed = ScalarUtil.blessed(item) ~%]
  [%~ IF blessed ~%]
    [%~ SWITCH blessed ~%]

      [%~ ################################################ ~%]
      [%~ CASE 'IDL::AST::module' ~%]
      [%~ ################################################ ~%]
        [%~ rhs = as_list(item) ~%]
class [% INCLUDE getLexeme item=rhs.1 %] {
[% INCLUDE ast2perl item=as_list(item).3 indent=indent+2 %]
}
[%~ RETURN ~%]

      [%~ ################################################ ~%]
      [%~ CASE 'IDL::AST::forwardDcl' ~%]
      [%~ ################################################ ~%]
        [%~ rhs = as_list(item) ~%]
[% sp(indent) %]requires [% INCLUDE getLexeme item=rhs.2 %];
[% RETURN ~%]

      [%~ ################################################ ~%]
      [%~ CASE 'IDL::AST::definition' ~%]
      [%~ ################################################ ~%]

      [%~ CASE DEFAULT ~%]
    [%~ END ~%]
    [%~ FOREACH rhs IN as_list(item) ~%]
      [%~ INCLUDE ast2perl item=rhs ~%]
    [%~ END ~%]
  [%~ END ~%]
[%~ END ~%]
