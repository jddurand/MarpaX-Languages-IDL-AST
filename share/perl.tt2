#!env perl

use MooseX::Declare;
use MooseX::Types::Structured;
use MooseX::Types::Common::Numeric;
use MooseX::ABCD;

[% # The whole IDL file is describing what is "Role" in Moose terminology
   # Instead of requiring the ScalarUtil, Dumper etc... plugin, the following methods are explicitely provided by the caller:
   # - Scalar::Utils::blessed()
   # - Scalar::Utils::reftype()
   # - Data::Dumper()
   # TT2 does not like blessed arrays, we provide a method that return the content: as_list
   # - as_list()
   #
   # As of time of of this writing, nested namespaces are not supported by MooseX::Declare
   # so they are explicitely setted
   #
~%]
[% PROCESS ast2perl item=ast indent=0 root=[] scope=[] %]
[% nl %]
[%~ RETURN ~%]

[%~# Remember: AST is always a blessed array reference. Every item inside as well, EXCEPT hardcoded lexemes ~%]

[%~ BLOCK printDump ~%]
  [%~ PERL ~%]
    use Data::Dumper;
    print Dumper($stash->get('what'));
  [%~ END ~%]
[%~ END ~%]
[%~ BLOCK getLexeme; lexeme(as_list(item.0));  END ~%]

[%~ BLOCK pushRoot;  root.push(root.size <= 0 ? what : '::' _ what);   END ~%]
[%~ BLOCK printRoot; root.join('');            END ~%]
[%~ BLOCK popRoot;   dummy = root.pop();       END ~%]
[%~ # Scope is always relative when we push it, so there is always '::' ~%]
[%~ BLOCK pushScope;  scope.push('::' _ what); END ~%]
[%~ BLOCK printScope; INCLUDE printRoot; scope.join('');          END ~%]
[%~ BLOCK popScope;   dummy = scope.pop();     END ~%]
[%~ BLOCK xxxExpr; ~%]
  [%~ rhs = as_list(item) ~%]
  [%~ IF rhs.max == 2 ~%]
    [%~ INCLUDE ast2perl item=rhs.0 %]
    [%~ INCLUDE getLexeme item=rhs.1 ~%]
    [%~ INCLUDE ast2perl item=rhs.2 %]
  [%~ ELSE ~%]
    [%~ INCLUDE ast2perl item=rhs.0 %]
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK ast2perl ~%]
  [% indent = newindent || indent ~%]
  [%~ blessedName = blessed(item) ~%]
  [%~ IF blessedName ~%]
    [%~ SWITCH blessedName ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::module' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.1 | trim ~%]
        [%~ INCLUDE pushRoot what=identifier ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]role [% INCLUDE printRoot | trim  %] {
[% sp(indent) %]  use MooseX::Interface;
[% INCLUDE ast2perl item=as_list(item).3 newindent=indent+2 %]
[% sp(indent) %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ INCLUDE popRoot ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::forwardDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.2 | trim ~%]
        [%~ INCLUDE pushScope what=identifier | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]with '[% INCLUDE printScope | trim %]';
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ INCLUDE popScope ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::interfaceDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ interfaceHeader = rhs.0 ~%]
        [% # Note: interfaceHader will push to scope without popping ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE ast2perl item=interfaceHeader %] {
[% sp(indent+2) %]use MooseX::Interface;
[% sp(indent) %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ INCLUDE popScope ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::interfaceHeader' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.2 | trim ~%]
        [%~ INCLUDE pushScope what=identifier ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% nl %]
[% sp(indent) %]role [% INCLUDE printScope | trim %] 
        [%~# We would like the with () on the same line, so it is done explicitely here ~%]
        [%~ INCLUDE popScope ~%]
        [%~ interfaceInheritanceSpecMaybe = rhs.3 ~%]
[%~ INCLUDE ast2perl item=interfaceInheritanceSpecMaybe | trim ~%]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ INCLUDE pushScope what=identifier ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::interfaceInheritanceSpec' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ interfaceNameListMany = rhs.1 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]with ([%~ INCLUDE ast2perl item=interfaceNameListMany | trim ~%])
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::interfaceNameListMany' ~%]
      [%~################################################ ~%]
        [%~ FOREACH interfaceName IN as_list(item) ~%]
          [%~ scopedName = as_list(interfaceName) ~%]
          [%~# C.f. AST/Value.pm, where concatenation of scopedName is already done, so that scopedName looks like a lexeme ~%]
          [%~# If scopedName begins with '::', this is an absolute scope, otherwise a relative scope ~%]
          [%~ identifier = INCLUDE getLexeme item=scopedName; ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[%~ loop.index() > 0 ? ', ' : ''; ~%]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ IF identifier.match('^::') ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[%~ identifier ~%]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ ELSE ~%]
            [%~ INCLUDE pushScope what=identifier ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[%~ INCLUDE printScope | trim ~%]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
            [%~ INCLUDE popScope ~%]
          [%~ END ~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::declaratorListMany' ~%]
      [%~################################################ ~%]
        [%~ FOREACH rhs IN as_list(item) ~%]
          [%~ declarator = INCLUDE ast2perl item=rhs | trim ~%]
[%~#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[%~ loop.index() > 0 ? ', ' : ''; ~%]
[%~ declarator ~%]
[%~#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::typeDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ firstItem = rhs.0 ~%]
        [%~ IF NOT blessed(firstItem) ~%]
          [%~ IF firstItem == 'typedef' ~%]
            [%~ typeDeclarator = rhs.1 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE ast2perl item=typeDeclarator newindent=indent+2 | trim %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
            [%~ RETURN ~%]
          [%~ END ~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::sequenceType' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ simpleTypeSpec = rhs.2 ~%]
        [%~ IF rhs.max == 4 ~%]
          [%~ positiveIntConst = INCLUDE ast2perl item=rhs.4 | trim ~%]
        [%~ ELSE ~%]
          [%~ positiveIntConst = -1 ~%]
        [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]ArrayRef[[%~ INCLUDE ast2perl item=simpleTypeSpec | trim ~%]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ IF positiveIntConst >= 0 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %], where {scalar(@_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::floatingPtType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Num
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::signedInt' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Int
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::unsignedInt' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]PositiveOrZeroInt
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::octetType' ~%]
      [%~# Note: octetType is binary data ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Defined
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::anyType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Any
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::objectType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Object
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::charType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Str
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::wideCharType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Str
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::booleanType' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]Bool
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~# No need to go further ~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::orExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::xorExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::andExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::shiftExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::addExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::multExpr' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% INCLUDE xxxExpr %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::constDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ constType = INCLUDE ast2perl item=rhs.1 | trim ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.2 | trim ~%]
        [%~ constExp = INCLUDE ast2perl item=rhs.4 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]has '[%~ identifier ~%]' => (isa => '[%~ constType ~%]', is => 'ro', default => [% constExp ~%]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::unaryOperator' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme item=rhs.0 | trim %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::primaryExpr' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ IF rhs.max == 2 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %](
[% INCLUDE ast2perl item=rhs.1 newindent=indent+2 %]
[% sp(indent) %])
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
          [%~ RETURN ~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::scopedName' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% lexeme(item) %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::identifier' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::integerLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::fixedPtLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::floatingPtLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %][% INCLUDE getLexeme %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::stringLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]"[% INCLUDE getLexeme %]"
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::wideStringLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]"[% INCLUDE getLexeme %]"
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::characterLiteral' ~%]
      [%~################################################ ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]"[% INCLUDE getLexeme %]"
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::booleanLiteral' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ booleanLiteral = INCLUDE getLexeme item=rhs.0 | trim ~%]
        [%~ IF booleanLiteral == 'TRUE' ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]1
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]0
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::valueForwardDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ booleanLiteral = INCLUDE getLexeme item=rhs.0 | trim ~%]
        [%~ IF booleanLiteral == 'TRUE' ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]1
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]0
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::valueBoxDcl' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ identifier = INCLUDE getLexeme item=rhs.1 | trim ~%]
        [%~ typeSpec = INCLUDE ast2perl item=rhs.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% sp(indent) %]subtype '[% identifier %]', as '[% typeSpec %]';
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ RETURN ~%]

      [%~################################################ ~%]
      [%~ CASE 'IDL::AST::typeDeclarator' ~%]
      [%~################################################ ~%]
        [%~ rhs = as_list(item) ~%]
        [%~ typeSpec = INCLUDE ast2perl item=rhs.0 | trim ~%]
        [%~ declarators = INCLUDE ast2perl item=rhs.1 | trim ~%]
        [%~# We are lucky that only this rule correspond to typedef -; ~%]
        [%~ FOREACH declarator IN declarators.split(', ') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% loop.index() > 0 ? nl : ''; sp(indent) %]subtype '[% declarator %]', as '[% typeSpec %]';
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
        [%~ END ~%]
        [%~ RETURN ~%]

      [%~ CASE DEFAULT ~%]

    [%~ END ~%]
    [%~ FOREACH rhs IN as_list(item) ~%]
      [%~ INCLUDE ast2perl item=rhs ~%]
    [%~ END ~%]
  [%~ END ~%]
[%~ END ~%]
