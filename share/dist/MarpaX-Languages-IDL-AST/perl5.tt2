[%~ # ######################################################################## ~%]
[%~ # TT2 is called with these variable pre-filled:                            ~%]
[%~ #                                                                          ~%]
[%~ # Input: ast                  an AST value as returned by parse()          ~%]
[%~ #        nativeFloat          native Num instead of Math::BigFloat         ~%]
[%~ #        style                Moose, etc... an OO style is REQUIRED        ~%]
[%~ #                            (explicit support of has, class_has, etc...)  ~%]
[%~ #                                                                          ~%]
[%~ # Notes:                                                                   ~%]
[%~ # - raisesExpr on attributes is ignored                                    ~%]
[%~ # - valuetype is mapped to a role                                          ~%]
[%~ # - contextExpression in an op is ignored                                  ~%]
[%~ # - paramAttribute IN/OUT/INOUT is ignored                                 ~%]
[%~ #                                                                          ~%]
[%~ # We expect any style to provide the following templates:                  ~%]
[%~ # -------------------------------------------------------                  ~%]
[%~ # op.tt2                                                                   ~%]
[%~ #   opArg0=opAttributeMaybe                                                ~%]
[%~ #   opArg1=opTypeSpec                                                      ~%]
[%~ #   opArg2=identifier                                                      ~%]
[%~ #   opArg3=parameterDcls                                                   ~%]
[%~ #   opArg4=raisesExprMaybe                                                 ~%]
[%~ #   opArg5=contextExprMaybe                                                ~%]
[%~ #   opArg6=currentFullyQualifiedScopedName                                 ~%]
[%~ #                                                                          ~%]
[%~ #   where  parameterDcls is a comma-separatated list of parameter          ~%]
[%~ #          and parameter is a space separated list of type and paramName   ~%]
[%~ #                                                                          ~%]
[%~ # ######################################################################## ~%]
[%~ # Template dependencies ~%]
[%~ USE ScalarUtil ~%]
[%~ USE PerlTidy ~%]
[%~ FILTER $PerlTidy ~%]

[%~ # Internal variables ~%]
[%~ PROCESS _initGlobalVariables ~%]

[%~ # Go ~%]
[%~ PROCESS _initNameSpace namespaceArg0='file' namespaceArg1='main' ~%]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[% PROCESS "top.tt2" %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ body = PROCESS _process processArg0=ast processArg1='specification' ~%]
[%~ PROCESS _printCurrentNamespace currentNamespaceArg0=body | $PerlTidy ~%]
[%~ PROCESS _closeLastNameSpace lastNamespaceArg0='root' ~%]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[% PROCESS "bottom.tt2" %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ # ************************************************************************** ~%]
[%~ #                       TEMPLATE TOOLKIT TOOLS                               ~%]
[%~ # ************************************************************************** ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                         LEXEMES OF INTEREST                                ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ # ..................   Variable Lexemes .................................... ~%]

[%~ BLOCK "scopedName"            ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='scopedName'            | trim ~%][%~ END ~%]
[%~ BLOCK "IDENTIFIER"            ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='IDENTIFIER'            | trim ~%][%~ END ~%]
[%~ BLOCK "STRINGLITERALUNIT"     ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='STRINGLITERALUNIT'     | trim ~%][%~ END ~%]
[%~ BLOCK "WIDESTRINGLITERALUNIT" ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='WIDESTRINGLITERALUNIT' | trim ~%][%~ END ~%]
[%~ BLOCK "CHARACTERLITERAL"      ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='CHARACTERLITERAL'      | trim ~%][%~ END ~%]
[%~ BLOCK "WIDECHARACTERLITERAL"  ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='WIDECHARACTERLITERAL'  | trim ~%][%~ END ~%]
[%~ BLOCK "ICONSTANT"             ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='ICONSTANT'             | trim ~%][%~ END ~%]
[%~ BLOCK "CPPSTYLEDIRECTIVE"     ~%][%~ tokenValue = PROCESS _lexeme lexemeArg0=array ~%][%~ PROCESS "token.tt2" tokenName='CPPSTYLEDIRECTIVE'     | trim ~%][%~ END ~%]

[%~ # ..................   Constant Lexemes .................................... ~%]

[%~ BLOCK "OR"     ~%][%~ PROCESS "token.tt2" tokenName='OR'     | trim ~%][%~ END ~%]
[%~ BLOCK "XOR"    ~%][%~ PROCESS "token.tt2" tokenName='XOR'    | trim ~%][%~ END ~%]
[%~ BLOCK "AND"    ~%][%~ PROCESS "token.tt2" tokenName='AND'    | trim ~%][%~ END ~%]
[%~ BLOCK "RSHIFT" ~%][%~ PROCESS "token.tt2" tokenName='RSHIFT' | trim ~%][%~ END ~%]
[%~ BLOCK "LSHIFT" ~%][%~ PROCESS "token.tt2" tokenName='LSHIFT' | trim ~%][%~ END ~%]
[%~ BLOCK "PLUS"   ~%][%~ PROCESS "token.tt2" tokenName='PLUS'   | trim ~%][%~ END ~%]
[%~ BLOCK "MINUS"  ~%][%~ PROCESS "token.tt2" tokenName='MINUS'  | trim ~%][%~ END ~%]
[%~ BLOCK "MUL"    ~%][%~ PROCESS "token.tt2" tokenName='MUL'    | trim ~%][%~ END ~%]
[%~ BLOCK "DIV"    ~%][%~ PROCESS "token.tt2" tokenName='DIV'    | trim ~%][%~ END ~%]
[%~ BLOCK "MOD"    ~%][%~ PROCESS "token.tt2" tokenName='MOD'    | trim ~%][%~ END ~%]
[%~ BLOCK "TILDE"  ~%][%~ PROCESS "token.tt2" tokenName='TILDE'  | trim ~%][%~ END ~%]
[%~ BLOCK "TRUE"   ~%][%~ PROCESS "token.tt2" tokenName='TRUE'   | trim ~%][%~ END ~%]
[%~ BLOCK "FALSE"  ~%][%~ PROCESS "token.tt2" tokenName='FALSE'  | trim ~%][%~ END ~%]
[%~ BLOCK "VOID"   ~%][%~ PROCESS "token.tt2" tokenName='VOID'   | trim ~%][%~ END ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                           RULES OF INTEREST                                ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ BLOCK "importedScope" ~%]
  [%~ #
      # <importedScope>              ::= <scopedName>
      #                              |   <stringLiteral>
      # ~%]
  [%~ importedScope = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ argumentBlessed = ScalarUtil.blessed(array.0) ~%]
  [%~ IF (! argumentBlessed.defined) ~%]
    [%~ THROW importedScope "Bad argument: rhs is not blessed" ~%]  
  [%~ END ~%]
  [%~ argumentBlessedName = argumentBlessed.split('::').last ~%]
  [%~ PROCESS "import.tt2" importType=argumentBlessedName importValue=importedScope | trim ~%]
  [%~ processSubtree = 0 %]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                            _baseTypeSpec                                   ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "_baseTypeSpec" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add a basetype to current scope                                          ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: basetypeArg0         a base type                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ useBaseTypes = PROCESS "useBaseTypes.tt2" | trim ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0=useBaseTypes ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% basetypeArg0 %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ BLOCK "floatingPtType"      ~%]
  [% IF (nativeFloat == 1) %]
    [%~ PROCESS _baseTypeSpec basetypeArg0='_floatingPtType' ~%]
  [%~ ELSE ~%]
    [%~ PROCESS _baseTypeSpec basetypeArg0='_nativeFloatingPtType' ~%]
  [%~ END ~%]
[%~ END ~%]
[%~ BLOCK "signedShortInt"      ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_signedShortInt'      ~%][%~ END ~%]
[%~ BLOCK "signedLongInt"       ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_signedLongInt'       ~%][%~ END ~%]
[%~ BLOCK "signedLonglongInt"   ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_signedLonglongInt'   ~%][%~ END ~%]
[%~ BLOCK "unsignedShortInt"    ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_unsignedShortInt'    ~%][%~ END ~%]
[%~ BLOCK "unsignedLongInt"     ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_unsignedLongInt'     ~%][%~ END ~%]
[%~ BLOCK "unsignedLonglongInt" ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_unsignedLonglongInt' ~%][%~ END ~%]
[%~ BLOCK "charType"            ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_charType'            ~%][%~ END ~%]
[%~ BLOCK "wideCharType"        ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_wideCharType'        ~%][%~ END ~%]
[%~ BLOCK "booleanType"         ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_booleanType'         ~%][%~ END ~%]
[%~ BLOCK "octetType"           ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_octetType'           ~%][%~ END ~%]
[%~ BLOCK "anyType"             ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_anyType'             ~%][%~ END ~%]
[%~ BLOCK "objectType"          ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_objectType'          ~%][%~ END ~%]
[%~ BLOCK "valueBaseType"       ~%][%~ PROCESS _baseTypeSpec basetypeArg0='_valueBaseType'       ~%][%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              stringLiteral                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "stringLiteral" ~%]
  [%~ #
      # <stringLiteral> ::= STRINGLITERALUNIT+
      #
      # ~%]
  [%~ stringLiteralArray = [] ~%]
  [%~ FOR stringLiteralUnit IN array ~%]
    [%~ stringLiteral = INCLUDE _process processArg0=stringLiteralUnit ~%]
    [%~ stringLiteralArray.push(stringLiteral) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% stringLiteralArray.join(' . ') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                            wideStringLiteral                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "wideStringLiteral" ~%]
  [%~ #
      # <wideStringLiteral> ::= WIDESTRINGLITERALUNIT+
      #
      # ~%]
  [%~ wideStringLiteralArray = [] ~%]
  [%~ FOR wideStringLiteralUnit IN array ~%]
    [%~ wideStringLiteral = INCLUDE _process processArg0=wideStringLiteralUnit ~%]
    [%~ wideStringLiteral = wideStringLiteral.replace('^L', '') ~%]
    [%~ wideStringLiteralArray.push(wideStringLiteral) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% wideStringLiteralArray.join(' . ') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             templateTypeSpec                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "sequenceType" ~%]
  [%~ #
      # <sequenceType>               ::= SEQUENCE LT <simpleTypeSpec> COMMA <positiveIntConst> GT
      #                              | SEQUENCE LT <simpleTypeSpec> GT
      # ~%]
  [%~ simpleTypeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type='ArrayRef' currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ IF array.size == 6 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.4 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
ArrayRef[[% simpleTypeSpec %]], where => {scalar(@_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
ArrayRef[[% simpleTypeSpec %]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               wideStringType                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "wideStringType" ~%]
  [%~ #
      # <wideStringType>             ::= WSTRING LT <positiveIntConst> GT
      #                              | WSTRING
      # ~%]
  [%~ useBaseTypes = PROCESS "useBaseTypes.tt2" | trim ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0=useBaseTypes ~%]
  [%~ IF array.size == 4 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
_wideStringType, where => {length(\$_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
_wideStringType
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 stringType                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "stringType" ~%]
  [%~ #
      # <stringType>                 ::= STRING LT <positiveIntConst> GT
      #                              | STRING
      # ~%]
  [%~ useBaseTypes = PROCESS "useBaseTypes.tt2" | trim ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0=useBaseTypes ~%]
  [%~ IF array.size == 4 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
_stringType, where => {length(\$_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
_stringType
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                fixedPtType                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "fixedPtType" ~%]
  [%~ #
      # <fixedPtType>                ::= FIXED LT <positiveIntConst> COMMA <positiveIntConst> GT
      # ~%]
  [%~ positiveIntConst1 = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ positiveIntConst2 = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ useBaseTypes = PROCESS "useBaseTypes.tt2" | trim ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0=useBaseTypes ~%]
  [%~ IF (nativeFloat == 1) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
_nativeFloatingPtType
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
_floatingPtType, via {my $x = Math::BigFloat->new(\$_); $x->precision([% positiveIntConst2 %]); $x->accuracy([% positiveIntConst2 %]); $x}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                structType                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "structType" ~%]
  [%~ #
      # <structType>                 ::= STRUCT <identifier> LCURLY <memberList> RCURLY
      # ~%]
  [%~ idlContext.DictMode = idlContext.DictMode + 1 ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ memberList = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type='Dict' currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ IF (idlContext.DictMode <= 1) ~%]
    [%~ # Only the top level structure can be seen from outside ~%]
    [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='subtype(' _ identifier _ ', { as => Dict[' _ memberList _ ']})' ~%]
  [%~ ELSE ~%]
    [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='subtype({ as => Dict[' _ memberList _ ']})' ~%]
  [%~ END ~%]
  [%~ idlContext.DictMode = idlContext.DictMode - 1 ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                forwardDcl                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "forwardDcl" ~%]
  [%~ #
      # <forwardDcl>                 ::= <abstractOrLocalMaybe> INTERFACE <identifier>
      # ~%]
  [%~ abstractOrLocalMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ forwardFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type(' _ identifier _ ', {role => \'' _ forwardFullyQualifiedScopedName _ '\'})' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             interfaceHeader                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceHeader" ~%]
  [%~ #
      # <interfaceHeader>            ::= <abstractOrLocalMaybe> INTERFACE <identifier> <interfaceInheritanceSpecMaybe>
      # ~%]
  [%~ abstractOrLocalMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ interfaceFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type(' _ identifier _ ', {role => \'' _ interfaceFullyQualifiedScopedName _ '\'})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier ~%]
  [%~ interfaceInheritanceSpecMaybe = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               interfaceDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceDcl" ~%]
  [%~ #
      # <interfaceDcl>               ::= <interfaceHeader> LCURLY <interfaceBody> RCURLY
      # ~%]
  [%~ # Take care: it is interfaceHeader that will initialize the namespace ~%]
  [%~ INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ interfaceBody = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ PROCESS _printCurrentNamespace currentNamespaceArg0=interfaceBody ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               interfaceName                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceName" ~%]
  [%~ #
      # <interfaceName>              ::= <scopedName>
      # ~%]
  [%~ scopedName = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ # This is a special case. We want the with() to be inserted in the new namespace ~%]
  [%~ # but we want the resolving to be done with the namespace just upper ~%]
  [%~ # Per def we either in an interface or a valuetype, i.e. in a scope namespace ~%]
  [%~ lastScopeId = scope.pop ~%]
  [%~ fullQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=scopedName ~%]
  [%~ CALL scope.push(lastScopeId) ~%]
  [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=fullQualifiedScopedName ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  enumType                                  ~%]
[%~ # Note: an enum does define a new type                                       ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "enumType" ~%]
  [%~ #
      # <enumType>                   ::= ENUM <identifier> LCURLY <enumeratorListMany> RCURLY
      # ~%]
  [%~# Note: an enum does NOT open a new scope ~%]

  [%~ enumType = 'Int' ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ enumeratorListMany = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ enumFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type(' _ identifier _ ', {role => \'' _ enumFullyQualifiedScopedName _ '\'})' ~%]
  [%~ FOREACH enumerator IN enumeratorListMany.split(',') ~%]
    [%~ PROCESS _printScopedname scopednameArg0=enumerator scopednameArg1=loop.index ~%]
  [%~ END ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type='Int' currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ dummy = '' ~%]
  [%~ FOREACH enumerator IN enumeratorListMany.split(',') ~%]
    [%~ dummy = dummy _ 'has \'' _ enumerator _ '\' => (is => \'ro\', isa => ' _ enumType _ ', default => $' _ enumerator _ ');' ~%]
  [%~ END ~%]
  [%~ PROCESS _printCurrentNamespace currentNamespaceArg0=dummy ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=enumFullyQualifiedScopedName ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             declaratorListMany                             ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "declaratorListMany" ~%]
  [%~ #
      # <declaratorListMany> ::= <declarator>+ separator => <comma>
      # ~%]
  [%~ declaratorListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ declarator = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ declaratorListMany.unshift(declarator) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% declaratorListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 switchBody                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "switchBody" ~%]
  [%~ #
      # <switchBody>                 ::= <case>+
      # ~%]
  [%~ switchBody = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ switch = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ switchBody.push(switch) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% switchBody.join("\0") %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               caseLabel                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "caseLabel" ~%]
  [%~ #
      # <caseLabel>                  ::= CASE <constExp> COLON
      #                              |   DEFAULT COLON
      # ~%]
  [%~ IF (case.elementSpecMode == 0) ~%]
    [%~ IF (array.size == 3) ~%]
      [%~ constExp = INCLUDE _process processArg0=array.1 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
if (\$[% case.discriminatorLabel %] == [% constExp %])
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
else
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ END ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              elementSpec                                   ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "elementSpec" ~%]
  [%~ #
      # <elementSpec>                ::= <typeSpec> <declarator>
      # ~%]
  [%~ IF (case.elementSpecMode == 1) ~%]
    [%~ typeSpec = INCLUDE _process processArg0=array.0 | trim ~%]
    [%~ declarator = INCLUDE _process processArg0=array.1 | trim ~%]
    [%~ localIdentifier = PROCESS _declaratorToIdentifier declaratorToIdentifierArg0=declarator | trim ~%]
    [%~ localType = PROCESS _declaratorToType declaratorToTypeArg0=declarator declaratorToTypeArg1=typeSpec | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% localIdentifier %]' => (is => 'rw', isa => [% localType %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             enumeratorListMany                             ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "enumeratorListMany" ~%]
  [%~ #
      # <enumeratorListMany> ::= <enumerator>+ separator => <comma>
      # ~%]
  [%~ enumeratorListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ enumerator = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ enumeratorListMany.push(enumerator) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% enumeratorListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                          simpleDeclaratorListMany                          ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "simpleDeclaratorListMany" ~%]
  [%~ #
      # <simpleDeclaratorListMany> ::= <simpleDeclarator>+ separator => <comma>
      # ~%]
  [%~ simpleDeclaratorListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ simpleDeclarator = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ simpleDeclaratorListMany.unshift(simpleDeclarator) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% simpleDeclaratorListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              paramDclListMany                              ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "paramDclListMany" ~%]
  [%~ #
      # <paramDclListMany> ::= <paramDcl>+ separator => <comma>
      # ~%]
  [%~ paramDclListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ paramDcl = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ paramDclListMany.push(paramDcl) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% paramDclListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                            fixedArraySizeMany                              ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "fixedArraySizeMany" ~%]
  [%~ #
      # <fixedArraySizeMany> ::= <fixedArraySize>+
      # ~%]
  [%~ fixedArraySizeMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ fixedArraySize = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ fixedArraySizeMany.unshift(fixedArraySize) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% fixedArraySizeMany.join(' * ') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              arrayDeclarator                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "arrayDeclaratorX" ~%]
  [%~ #
      # <arrayDeclarator>            ::= <identifier> <fixedArraySizeMany>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ fixedArraySizeMany = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type='ArrayRef' currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% identifier %][[% fixedArraySizeMany %]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  module                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "module" ~%]
  [%~ #
      # <module>                     ::= MODULE <identifier> LCURLY <definitionMany> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='root' namespaceArg1=identifier ~%]
  [%~ definitionMany = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS _printCurrentNamespace currentNamespaceArg0=definitionMany ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='root' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              typeDeclarator                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "typeDeclarator" ~%]
  [%~ #
      # <typeDeclarator>             ::= <typeSpec> <declarators>
      # ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ declarators = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH declarator IN declarators.split(',') ~%]
    [%~ localIdentifier = PROCESS _declaratorToIdentifier declaratorToIdentifierArg0=declarator | trim ~%]
    [%~ localType = PROCESS _declaratorToType declaratorToTypeArg0=declarator declaratorToTypeArg1=typeSpec | trim ~%]
    [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
    [%~ PROCESS "useSpecializedType.tt2" type=localIdentifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
    [%~ PROCESS _printScopedname scopednameArg0=localIdentifier scopednameArg1=localType ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                valueBoxDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "valueBoxDcl" ~%]
  [%~ #
      # <valueBoxDcl>                ::= VALUETYPE <identifier> <typeSpec>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='subtype(' _ identifier _ ', { as => ' _ typeSpec _ '})' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                valueAbsDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "valueAbsDcl" ~%]
  [%~ #
      # ABSTRACT VALUETYPE <identifier> <valueInheritanceSpecMaybe> LCURLY <exportAny> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ valueFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type(' _ identifier _ ', {role => \'' _ valueFullyQualifiedScopedName _ '\'})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier ~%]
  [%~ valueInheritanceSpecMaybe = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ exportAny = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ PROCESS _printCurrentNamespace currentNamespaceArg0=exportAny ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                          supportedInterfaceSpec                            ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "supportedInterfaceSpec" ~%]
  [%~ #
      # <supportedInterfaceSpec>     ::= SUPPORTS <scopedNameListMany>
      # ~%]
  [%~ scopedNameListMany = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH scopedName IN scopedNameListMany.split(',') ~%]
    [%~ fullQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=scopedName ~%]
    [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=fullQualifiedScopedName ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                       valueInheritanceSpec1Values                          ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "valueInheritanceSpec1Values" ~%]
  [%~ #
      # <valueInheritanceSpec1Values> ::= COLON <truncatableMaybe> <valueNameListMany>
      # ~%]
  [%~ valueNameListMany = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ FOREACH valueName IN valueNameListMany.split(',') ~%]
    [%~ fullQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=valueName ~%]
    [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=fullQualifiedScopedName ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 exceptDcl                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "exceptDcl" ~%]
  [%~ #
      # <exceptDcl>                  ::= EXCEPTION <identifier> LCURLY <memberAny> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ exceptFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type(' _ identifier _ ', {role => \'' _ exceptFullyQualifiedScopedName _ '\'})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier ~%]
  [%~ memberAny = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0='Throwable' ~%]
  [%~ PROCESS _printCurrentNamespace currentNamespaceArg0=memberAny ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  member                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "member" ~%]
  [%~ #
      # <member>                     ::= <typeSpec> <declarators> SEMICOLON
      # ~%]
  [%~ idlContext.MemberMode = idlContext.MemberMode + 1 ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ declarators = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH declarator IN declarators.split(',') ~%]
    [%~ localIdentifier = PROCESS _declaratorToIdentifier declaratorToIdentifierArg0=declarator | trim ~%]
    [%~ localType = PROCESS _declaratorToType declaratorToTypeArg0=declarator declaratorToTypeArg1=typeSpec | trim ~%]
    [%~ IF (idlContext.DictMode > 0) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% localIdentifier %] => [% localType %],
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% localIdentifier %]' => (is => 'rw', as => [% localType %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ END ~%]
  [%~ END ~%]
  [%~ idlContext.MemberMode = idlContext.MemberMode - 1 ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                constDclOrig                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "constDclOrig" ~%]
  [%~ #
      # <constDcl>                   ::= CONST <constType> <identifier> EQUAL <constExp>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ constFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier ~%]
  [%~ constType = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ constExp = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ useBaseTypes = PROCESS "useBaseTypes.tt2" | trim ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0=useBaseTypes ~%]
  [%~ dummy = 'has \'' _ identifier _ '\' => (is => \'ro\', isa => ' _ constType _ ', default => do {' _ constExp _ '});' ~%]
  [%~ PROCESS _printCurrentNamespace currentNamespaceArg0=dummy ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type(' _ identifier _ ', {role => \'' _ constFullyQualifiedScopedName _ '\'})' ~%]
  [%~ # PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='do {' _ constExp _ '}' ~%]
  [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=constFullyQualifiedScopedName ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 constDcl                                   ~%]
[%~ # Note: a constant does not define a new type                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "constDcl" ~%]
  [%~ #
      # <constDcl>                   ::= CONST <constType> <identifier> EQUAL <constExp>
      # ~%]
  [%~ constType = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ constExp = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ useBaseTypes = PROCESS "useBaseTypes.tt2" | trim ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0=useBaseTypes ~%]
  [%~ useClassAttribute = PROCESS "useClassAttribute.tt2" | trim ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0=useClassAttribute ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='do {' _ constExp _ '}' ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
class_has '[% identifier %]' => (is => 'ro', isa => [% constType %], default => sub { \$[% identifier %] });
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                unionType                                   ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "unionType" ~%]
  [%~ #
      # <unionType>                  ::= UNION <identifier> SWITCH LPAREN <switchTypeSpec> RPAREN LCURLY <switchBody> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ unionFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS "useSpecializedType.tt2" type=identifier currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type(' _ identifier _ ', {role => \'' _ unionFullyQualifiedScopedName _ '\'})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier ~%]
  [%~ switchTypeSpec = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ case.elementSpecMode = 1 ~%]
  [%~ elementSpecMany = INCLUDE _process processArg0=array.7 | trim ~%]
  [%~ case.elementSpecMode = 0 ~%]
  [%~ case.discriminatorLabel = 'discriminator' ~%]
  [%~ caseLabelMany = INCLUDE _process processArg0=array.7 | trim ~%]
  [%~ # Note: we made sure that elementSpecs are fully qualified lines, separated by "\0" for convenience ~%]
  [%~ dummy = elementSpecMany.split("\0").join("\n") ~%]
  [%~ # Note: we add a method identifier that will return one of the members ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ input_validated_list = PROCESS "posValidatedList.tt2" identifier='discriminator' posSpec=switchTypeSpec currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
  [%~ dummy = dummy _ "\n" _ 'sub ' _ identifier _ '{ my $self = shift; ' _ input_validated_list ~%]
  [%~ # Note: we want the "else" to only appear at the end, if any ~%]
  [%~ else = '' ~%]
  [%~ elementSpecManyList = elementSpecMany.split("\0") ~%]
  [%~ iIf = 0 ~%]
  [%~ FOREACH caseLabel IN caseLabelMany.split("\0") ~%]
    [%~ index = loop.index ~%]
    [%~ matches = elementSpecManyList.$index.match("'([^']+)'") ~%]
    [%~ IF (caseLabel.match('^else')) ~%]
      [%~ else = caseLabel _ '{ return $self->' _ matches.0 _ ';}' ~%]
    [%~ ELSE ~%]
      [%~ IF (iIf == 0) ~%]
        [%~ dummy = dummy _ caseLabel _ '{ return $self->' _ matches.0 _ ';}' ~%]
      [%~ ELSE ~%]
        [%~ # Luckily, in perl, "else if" if "els" prepended to "if" -; ~%]
        [%~ dummy = dummy _ 'els' _ caseLabel _ '{ return $self->' _ matches.0 _ ';}' ~%]
      [%~ END ~%]
      [%~ iIf = iIf + 1 ~%]
    [%~ END ~%]
  [%~ END ~%]
  [%~ IF (else != '') ~%]
  [%~ dummy = dummy _ else ~%]
  [%~ END ~%]
  [%~ dummy = dummy _ '};' ~%]
  [%~ PROCESS _printCurrentNamespace currentNamespaceArg0=dummy ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=unionFullyQualifiedScopedName ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                            readonlyAttrSpec                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "readonlyAttrSpec" ~%]
  [%~ #
      # <readonlyAttrSpec>           ::= READONLY ATTRIBUTE <paramTypeSpec> <readonlyAttrDeclarator>
      # ~%]
  [%~ paramTypeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ readonlyAttrDeclarator = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ FOREACH attr IN readonlyAttrDeclarator.split(',') ~%]
    [%~ IF (idlContext.DictMode > 0) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% attr %] => [% paramTypeSpec %],
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% attr %]' => (is => 'ro', isa => [% paramTypeSpec %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ END ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                attrSpec                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "attrSpec" ~%]
  [%~ #
      # <attrSpec>                   ::= ATTRIBUTE <paramTypeSpec> <attrDeclarator>
      # ~%]
  [%~ paramTypeSpec = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ attrDeclarator = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ FOREACH attr IN attrDeclarator.split(',') ~%]
    [%~ IF (idlContext.DictMode > 0) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% attr %] => [% paramTypeSpec %],
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% attr %]' => (is => 'rw', isa => [% paramTypeSpec %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
    [%~ END ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  opDcl                                     ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "opDcl" ~%]
  [%~ #
      # <opDcl>                      ::= <opAttributeMaybe> <opTypeSpec> <identifier> <parameterDcls> <raisesExprMaybe> <contextExprMaybe>
      # ~%]
  [%~ opAttributeMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ opTypeSpec = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ parameterDcls = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ raisesExprMaybe = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ contextExprMaybe = INCLUDE _process processArg0=array.5 | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% PROCESS "op.tt2" opArg0=opAttributeMaybe opArg1=opTypeSpec opArg2=identifier opArg3=parameterDcls opArg4=raisesExprMaybe opArg5=contextExprMaybe opArg6=currentFullyQualifiedScopedName %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                paramDcl                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "paramDcl" ~%]
  [%~ #
      # <paramDcl>                   ::= <paramAttribute> <paramTypeSpec> <simpleDeclarator>
      # ~%]
  [%~ paramAttribute = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ paramTypeSpec = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ simpleDeclarator = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% paramTypeSpec %] [% simpleDeclarator %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                            simpleDeclarator                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "simpleDeclarator" ~%]
  [%~ #
      # <simpleDeclarator>           ::= <identifier>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.0 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% identifier %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                          supportedCppCommand                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "supportedCppCommand" ~%]
  [%~ #
      # <supportedCppCommand>        ::= CPPSTYLEDIRECTIVE
      # ~%]
  [%~ supportedCppCommand = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ IF (matches = supportedCppCommand.match('#[\s]*include[\s]+"([^"]+)"')) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
use [% matches.0.replace('\.idl', '') %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSIF (matches = supportedCppCommand.match('#[\s]*pragma[\s]+prefix[\s]+"([^"]+)"')) ~%]
    [% # We replace the very first scope main by this prefix %]
    [%~ PROCESS _initNameSpace namespaceArg0='prefix' namespaceArg1=matches.0.replace('\.', '::') ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                definition                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "definition" ~%]
  [%~ #
      # <definition>                 ::= <typeDcl> SEMICOLON
      #                              |   <constDcl> SEMICOLON
      #                              |   <exceptDcl> SEMICOLON
      #                              |   <interface> SEMICOLON
      #                              |   <module> SEMICOLON
      #                              |   <value> SEMICOLON
      #                              |   <typeIdDcl> SEMICOLON
      #                              |   <typePrefixDcl> SEMICOLON
      #                              |   <event> SEMICOLON
      #                              |   <component> SEMICOLON
      #                              |   <homeDcl> SEMICOLON
      # ~%]
  [%~ xxxDcl = INCLUDE _process processArg0=array.0 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% xxxDcl %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                                  TOOLS                                     ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ BLOCK "_lexeme" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Outputs a lexeme value                                                   ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: lexemeArg0          an array ref of [start, length, value]        ~%]
  [%~ # ######################################################################## ~%]
[% lexemeArg0.2 %]
[%~ END ~%]

[%~ # .......................................................................... ~%]

[%~ BLOCK "_process" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Scan the AST using a stack-light model                                   ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: processArg0          LHS name                                     ~%]
  [%~ #        processArg1          RHSs                                         ~%]
  [%~ #                                                                          ~%]
  [%~ # At every LHS, an PROCESS will be called i.e.:                            ~%]
  [%~ #                             PROCESS $lhs array                           ~%]
  [%~ # where array contains the RHS                                             ~%]
  [%~ #                                                                          ~%]
  [%~ # The call to PROCESS is surrounded by a TRY so that if a block for a      ~%]
  [%~ # given LHS does not exist, this will be silently ignored and the          ~%]
  [%~ # procedure will continue with the next LHS, in order they appear in the   ~%]
  [%~ # AST                                                                      ~%]
  [%~ #                                                                          ~%]
  [%~ # IF the PROCESS'ed block exist and puts the variable processSubtree to a  ~%]
  [%~ # false value, any subtree starting from $lhs will will be dropped.        ~%]
  [%~ # Default is to always continue for any existing PROCESS'ed bloc until     ~%]
  [%~ # there is no more blessed item. I.e. the subtree is always ending at      ~%]
  [%~ # lexemes, because they are not blessed.                                   ~%]
  [%~ # Default processSubtree is a true value at every PROCESS call.            ~%]
  [%~ #                                                                          ~%]
  [%~ # Usually an existing LHS block will put this variable to a true value if  ~%]
  [%~ # it wants the subtree to stop. Typicall usage is when current LHS is      ~%]
  [%~ # wrapping inner content.                                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # To perform localisation, in a PROCESS'ed block you will use INCLUDE.     ~%]
  [%~ # To perform variable settings in the same context, you will use PROCESS.  ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ IF (! processArg0) ~%]
    [%~ THROW processArg0 "Missing argument" ~%]
  [%~ END ~%]
  [%~ IF (! processArg1) ~%]
    [%~ THROW processArg1 "Missing argument" ~%]
  [%~ END ~%]

  [%~ processWorklist = [ processArg0 ] %]
  [%~ WHILE processWorklist.size > 0 %]
    [%~ processObj = processWorklist.shift ~%]
    [%~ TRY ~%]
      [%~ processBlessed = ScalarUtil.blessed(processObj) ~%]
      [%~ processShortBlessedName = processBlessed.split('::').last ~%]
    [%~ CATCH ~%]
      [%~ processBlessed = '' ~%]
      [%~ processShortBlessedName = '' ~%]
    [%~ END ~%]
    [%~ IF processShortBlessedName ~%]
      [%~ processObj2array = [] ~%]
      [%~ PERL ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        [%~ # TT2 does not like blessed arrays, we provide our PERL function to get'em ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        # Store RHS list in variable 'array'
        my $arrayp = $stash->get('processObj');
        $stash->set('processObj2array', [ @{$arrayp} ]);
      [%~ END ~%]
      [%~ processSubtree = 1 ~%]
      [%~ TRY ~%]
        [%~ PROCESS $processShortBlessedName array=processObj2array ~%]
      [%~ CATCH ~%]
        [% PERL %]
          # We want to send that to STDERR immediately if it is something else but 'file error'
          # We are smart enough to tell in which BLOCK it failed -;
          # We are not smart enought to redo a Template-like exception
          my $type = $stash->get([ 'error', [ 'type' ]]);
          my $processShortBlessedName = $stash->get('processShortBlessedName');
          if (! ($type =~ /^file error/)) {
            my $info = $stash->get([ 'error', [ 'info' ]]);
            print STDERR "Error when processing $processShortBlessedName! Type: $type, Info: $info\n";
          }
        [%~ END ~%]
        [%~ CLEAR ~%]
      [%~ END ~%]
      [%~ PERL ~%]
      [%~ END ~%]
      [%~ IF processSubtree ~%]
        [%~ PERL ~%]
          [%~ # ------------------------------------------------------------------------ ~%]
          [%~ # I believe this is quicker to do the unshift myself, true ?               ~%]
          [%~ # ------------------------------------------------------------------------ ~%]
          my $arrayp = $stash->get('processObj2array');
          my $processWorklist = $stash->get('processWorklist');
          # Unshift array into processWorklist
          unshift(@{$processWorklist}, @{$arrayp});
          $stash->set('processWorklist', $processWorklist);
        [%~ END ~%]
      [%~ END ~%]
    [%~ END ~%]
    [%~ TRY ~%]
      [%~ refType = ScalarUtil.reftype(processObj) ~%]
    [%~ CATCH ~%]
      [%~ refType = '' ~%]
    [%~ END ~%]
  [%~ END ~%]

[%~ END ~%]

[%~ BLOCK "_fullQualifiedScopedName" %]
  [%~ # ######################################################################## ~%]
  [%~ # Returns a full qualified scoped name                                     ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: fullQualifiedScopedNameArg0          a scoped name                ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to force a fully qualified     ~%]
  [%~ # name. This is happening everytime we reference a class or a role.        ~%]
  [%~ #                                                                          ~%]
  [%~ # In any case, we remove the leading 'main::' that is for file scope   ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ qualifiedScopedName = '' ~%]
  [%~ IF (! fullQualifiedScopedNameArg0.match('::')) ~%]
    [%~ allScopes = [] ~%]
    [%~ CALL allScopes.import(root, scope) ~%]
    [%~ qualifiedScopedName = allScopes.join('::') ~%]
    [%~ IF (fullQualifiedScopedNameArg0 != '') ~%]
      [%~ IF (qualifiedScopedName != '') ~%]
        [%~ qualifiedScopedName = qualifiedScopedName _ '::' _ fullQualifiedScopedNameArg0 ~%]
      [%~ ELSE ~%]
        [%~ qualifiedScopedName = fullQualifiedScopedNameArg0 ~%]
      [%~ END ~%]
    [%~ END ~%]
  [%~ ELSE ~%]
    [%~ qualifiedScopedName = fullQualifiedScopedNameArg0 ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% qualifiedScopedName.replace('^main::', '') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ BLOCK "_currentFullyQualifiedScopedName" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Returns the current fully qualified scoped name                          ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: N/A                                                               ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember information        ~%]
  [%~ # per fully qualified scoped name.                                         ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: the list of injected type constraints.                         ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
[%~ currentFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0='' | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% currentFullyQualifiedScopedName %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ BLOCK "_addWithToCurrentScope" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add a with() dependency into current scope                               ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: withToCurrentScopeArg0          a role                            ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember with() per scope   ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: with 'Something', 'Else', ...                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ withToCurrentScopeArg0 = withToCurrentScopeArg0.replace('\$', '') | trim ~%]

  [%~ withPerScope.$currentFullyQualifiedScopedName.push('\'' _ withToCurrentScopeArg0 _ '\'') ~%]
[%~ END ~%]

[%~ BLOCK "_addUseToCurrentNamespace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add a use dependency into current scope                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: useToCurrentScopeArg0          a use (full with its import)       ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember use per scope      ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: use Something 'option'                                         ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ duplicateStringMatch = 0 ~%]
  [%~ FOREACH use IN usePerScope.$currentFullyQualifiedScopedName ~%]
    [%~ IF (use == useToCurrentScopeArg0) ~%]
      [%~ duplicateStringMatch = 1 ~%]
      [%~ LAST ~%]
    [%~ END ~%]
  [%~ END ~%]
  [%~ IF (duplicateStringMatch == 0) ~%]
    [%~ usePerScope.$currentFullyQualifiedScopedName.push(useToCurrentScopeArg0)    ~%]
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK "_printNamespace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # print a role block (everything is a role here)                           ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: roleArg0               Fully Qualified block name                 ~%]
  [%~ #        roleArg1               content                                    ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [% PROCESS "namespace.tt2" identifier=roleArg0 content=roleArg1 %]
[%~ END ~%]

[%~ BLOCK "_printCurrentNamespace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # print current role block                                                 ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: currentNamespaceArg0        content                                    ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS _printNamespace roleArg0=currentFullyQualifiedScopedName roleArg1=currentNamespaceArg0 ~%]
[%~ END ~%]

[%~ BLOCK "_initGlobalVariables" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Initalize global variables needed in this template                       ~%]
  [%~ # ######################################################################## ~%]
  [%~ root = [] ~%]
  [%~ scope = [] ~%]
  [%~ withPerScope={} ~%]
  [%~ usePerScope={} ~%]
  [%~ namespaceTypePerscope={} ~%]
  [%~ scopednamePerscope={} ~%]
  [%~ idlContext.DictMode = 0 ~%]
  [%~ idlContext.MemberMode = 0 ~%]
  [%~ PROCESS "initGlobalVariables.tt2" ~%]
[%~ END ~%]

[%~ BLOCK "_initNameSpace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Initalize a new namespace (root or scope)                                ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: namespaceArg0        namespace type: file, root or scope          ~%]
  [%~ #        namespaceArg1        namespace basename                           ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ fullname = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=namespaceArg1 | trim %]
  [%~ SWITCH namespaceArg0 ~%]
    [%~ CASE 'root' ~%]
      [%~ CALL root.push(namespaceArg1) ~%]
      [%~ namespaceTypePerscope.$fullname = 'role' ~%]
    [%~ CASE 'file' ~%]
      [%~ CALL root.push(namespaceArg1) ~%]
      [%~ namespaceTypePerscope.$fullname = 'file' ~%]
    [%~ CASE 'scope' ~%]
      [%~ CALL scope.push(namespaceArg1) ~%]
      [%~ namespaceTypePerscope.$fullname = 'role' ~%]
    [%~ CASE 'prefix' ~%]
      [%~ oldFirstRoot = root.0 ~%]
      [%~ root.0 = namespaceArg1 ~%]
      [%~ namespaceTypePerscope.$fullname = 'file' ~%]
    [%~ CASE ~%]
      [%~ THROW namespaceArg0 "Bad argument: must be file, root or scope instead of " _ namespaceArg0 ~%]  
  [%~ END ~%]
  [%~ PROCESS "initNameSpace.tt2" identifier=fullname ~%]
  [%~ withPerScope.$fullname = [] # The with ordering can be important ~%]
  [%~ usePerScope.$fullname = [] ~%]
[%~ END ~%]

[%~ BLOCK "_closeLastNameSpace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # close last namespace (root or scope)                                     ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: lastNamespaceArg0        namespace type: file, root or scope      ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ SWITCH lastNamespaceArg0 ~%]
    [%~ CASE 'root' ~%]
      [%~ CALL root.pop ~%]
    [%~ CASE 'scope' ~%]
      [%~ CALL scope.pop ~%]
    [%~ CASE ~%]
      [%~ THROW lastNamespaceArg0 "Bad argument: must be file, root or scope instead of " _ lastNamespaceArg0 ~%]  
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK "_printScopedname" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # make sure a scoped name (our $XXX) is printed once                       ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: scopednameArg0        scoped name                                 ~%]
  [%~ #        scopednameArg1        scoped name value                           ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ yetPrinted = 0 ~%]
  [%~ TRY ~%]
    [%~ # Because of the strict mode this can generate an exception ~%]
    [%~ IF (scopednamePerscope.$currentFullyQualifiedScopedName.exists(scopednameArg0)) ~%]
      [%~ yetPrinted = 1 ~%]
    [%~ END ~%]
  [%~ CATCH ~%]
    [%~ yetPrinted = 0 ~%]
  [%~ END ~%]
  [%~ IF (yetPrinted == 0) ~%]
    [%~ scopednamePerscope.$currentFullyQualifiedScopedName.$scopednameArg0 = scopednameArg1 ~%]
    [%~ IF (idlContext.DictMode > 1) ~%]
      [%# Inside a Dict, a scoped name must be a "standalone" thingy  ~%]
do { my \$[% scopednameArg0 %] = [% scopednameArg1 %] }
    [%~ ELSE ~%]
our \$[% scopednameArg0 %] = [% scopednameArg1 %];
  [%~ END ~%]
  [%~ ELSE ~%]
    [%~ IF (scopednamePerscope.$currentFullyQualifiedScopedName.$scopednameArg0 != scopednameArg1) ~%]
      [%~ THROW scopednameArg1 "Redefinition of scoped name to another value" ~%]
    [%~ END ~%]
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK "_declaratorToIdentifier" ~%]
  [%~ IF (matches = declaratorToIdentifierArg0.match("([\^[]+)\\[(.+)\\]")) ~%]
    [% matches.0 %]
  [%~ ELSE ~%]
    [% declaratorToIdentifierArg0 %]
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK "_declaratorToType" ~%]
  [%~ identifier = PROCESS "_declaratorToIdentifier" declaratorToIdentifierArg0=declaratorToTypeArg0 | trim ~%]
  [%~ IF (matches = declaratorToTypeArg0.match("([\^[]+)\\[(.+)\\]")) ~%]
    [%~ size = matches.1 ~%]
  [%~ ELSE ~%]
    [%~ size = '' ~%]
  [%~ END ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~# In dict mode all subtypes are anonymous ~%]
  [%~ IF (idlContext.MemberMode > 0) ~%]
    [%~ IF (size.length > 0) ~%]
      [%~ PROCESS "useSpecializedType.tt2" type='ArrayRef' currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
subtype({ as => ArrayRef[[% declaratorToTypeArg1 %]], where => {scalar(@_) <= ([%~ size ~%])} })
    [%~ ELSE ~%]
[% declaratorToTypeArg1 %]
    [%~ END ~%]
  [%~ ELSE ~%]
    [%~ IF (size.length > 0) ~%]
      [%~ PROCESS "useSpecializedType.tt2" type='ArrayRef' currentFullyQualifiedScopedName=currentFullyQualifiedScopedName ~%]
subtype([% identifier %], { as => ArrayRef[[% declaratorToTypeArg1 %]], where => {scalar(@_) <= ([%~ size ~%])} })
    [%~ ELSE ~%]
subtype([% identifier %], { as => [% declaratorToTypeArg1 %] })
    [%~ END ~%]
  [%~ END ~%]
[%~ END ~%]

