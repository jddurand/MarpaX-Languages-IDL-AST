[%~ # ######################################################################## ~%]
[%~ # TT2 is called with these variable pre-filled:                            ~%]
[%~ #                                                                          ~%]
[%~ # ast                         an AST value as returned by parse()          ~%]
[%~ # cr($n)                      Output CR x $n                               ~%]
[%~ # nl($n)                      Output NL x $n                               ~%]
[%~ # sp($n)                      Output SP x $n                               ~%]
[%~ # tab($n)                     Output TAB x $n                              ~%]
[%~ #                                                                          ~%]
[%~ # TT2 is great except for the space management which is not easy.          ~%]
[%~ # My technique is to surround any output by [%#>>>~]...[%#<<<~] and to use ~%]
[%~ # trim when a block is surrounding another.                                ~%]
[%~ #                                                                          ~%]
[%~ #                                                                          ~%]
[%~ # ######################################################################## ~%]
[%~ USE ScalarUtil ~%]
[%~ USE PerlTidy ~%]
[%~ FILTER $PerlTidy ~%]
[%~ # Internal variables ~%]
[%~ root = [] ~%]
[%~ scope = [] ~%]
#!env perl

use MooseX::Declare;

[% PROCESS _process processArg0=ast
            processArg1='specification'
            subtypesPerScope={}
            | $PerlTidy %]
[%~ END ~%]

[%~ # ************************************************************************** ~%]
[%~ #                       TEMPLATE TOOLKIT TOOLS                               ~%]
[%~ # ************************************************************************** ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                         LEXEMES OF INTEREST                                ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ # ..................   Variable Lexemes .................................... ~%]

[%~ BLOCK "scopedName"            ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "IDENTIFIER"            ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "STRINGLITERALUNIT"     ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "WIDESTRINGLITERALUNIT" ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "CHARACTERLITERAL"      ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "WIDECHARACTERLITERAL"  ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "ICONSTANT"             ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]

[%~ # ..................   Constant Lexemes .................................... ~%]

[%~ BLOCK "OR"        ~%][%#~%]|[%#~%] [%~ END ~%]
[%~ BLOCK "XOR"       ~%][%#~%]^[%#~%] [%~ END ~%]
[%~ BLOCK "AND"       ~%][%#~%]&[%#~%] [%~ END ~%]
[%~ BLOCK "RSHIFT"    ~%][%#~%]>>[%#~%][%~ END ~%]
[%~ BLOCK "LSHIFT"    ~%][%#~%]<<[%#~%][%~ END ~%]
[%~ BLOCK "PLUS"      ~%][%#~%]+[%#~%] [%~ END ~%]
[%~ BLOCK "MINUS"     ~%][%#~%]-[%#~%] [%~ END ~%]
[%~ BLOCK "MUL"       ~%][%#~%]*[%#~%] [%~ END ~%]
[%~ BLOCK "DIV"       ~%][%#~%]/[%#~%] [%~ END ~%]
[%~ BLOCK "MOD"       ~%][%#~%]%[%#~%] [%~ END ~%]
[%~ BLOCK "TILDE"     ~%][%#~%]~[%#~%] [%~ END ~%]
[%~ BLOCK "SEMICOLON" ~%][%#~%];[%#~%] [%~ END ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                           RULES OF INTEREST                                ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ BLOCK "importedScope" ~%]
  [%~ #
      # <importedScope>              ::= <scopedName>
      #                              |   <stringLiteral>
      # ~%]
  [%~ importedScope = INCLUDE _process processArg0=array.0 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
load [% importedScope %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 %]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             baseTypeSpec                                   ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "floatingPtType" ~%]      [%#~%]floatingPtType[%#~%]      [%~ processSubtree = 0; END ~%]
[%~ BLOCK "signedShortInt" ~%]      [%#~%]signedShortInt[%#~%]      [%~ processSubtree = 0; END ~%]
[%~ BLOCK "signedLongInt" ~%]       [%#~%]signedLongInt[%#~%]       [%~ processSubtree = 0; END ~%]
[%~ BLOCK "signedLonglongInt" ~%]   [%#~%]signedLonglongInt[%#~%]   [%~ processSubtree = 0; END ~%]
[%~ BLOCK "unsignedShortInt" ~%]    [%#~%]unsignedShortInt[%#~%]    [%~ processSubtree = 0; END ~%]
[%~ BLOCK "unsignedLongInt" ~%]     [%#~%]unsignedLongInt[%#~%]     [%~ processSubtree = 0; END ~%]
[%~ BLOCK "unsignedLonglongInt" ~%] [%#~%]unsignedLonglongInt[%#~%] [%~ processSubtree = 0; END ~%]
[%~ BLOCK "charType" ~%]            [%#~%]charType[%#~%]            [%~ processSubtree = 0; END ~%]
[%~ BLOCK "wideCharType" ~%]        [%#~%]wideCharType[%#~%]        [%~ processSubtree = 0; END ~%]
[%~ BLOCK "booleanType" ~%]         [%#~%]booleanType[%#~%]         [%~ processSubtree = 0; END ~%]
[%~ BLOCK "octetType" ~%]           [%#~%]octetType[%#~%]           [%~ processSubtree = 0; END ~%]
[%~ BLOCK "anyType" ~%]             [%#~%]anyType[%#~%]             [%~ processSubtree = 0; END ~%]
[%~ BLOCK "objectType" ~%]          [%#~%]objectType[%#~%]          [%~ processSubtree = 0; END ~%]
[%~ BLOCK "valueBaseType" ~%]       [%#~%]valueBaseType[%#~%]       [%~ processSubtree = 0; END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             templateTypeSpec                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "sequenceType" ~%]
  [%~ #
      # <sequenceType>               ::= SEQUENCE LT <simpleTypeSpec> COMMA <positiveIntConst> GT
      #                              | SEQUENCE LT <simpleTypeSpec> GT
      # ~%]
  [%~ simpleTypeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ IF array.size == 6 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.4 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
as ArrayRef[[% simpleTypeSpec %]], where => {scalar(@_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
as ArrayRef[[% simpleTypeSpec %]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               wideStringType                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "wideStringType" ~%]
  [%~ #
      # <wideStringType>             ::= WSTRING LT <positiveIntConst> GT
      #                              | WSTRING
      # ~%]
  [%~ IF array.size == 4 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
as ArrayRef[wideCharType], where => {scalar(@_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
as ArrayRef[wideCharType]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 stringType                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "stringType" ~%]
  [%~ #
      # <stringType>                 ::= STRING LT <positiveIntConst> GT
      #                              | STRING
      # ~%]
  [%~ IF array.size == 4 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
as ArrayRef[charType], where => {scalar(@_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
as ArrayRef[charType]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                fixedPtType                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "fixedPtType" ~%]
  [%~ #
      # <fixedPtType>                ::= FIXED LT <positiveIntConst> COMMA <positiveIntConst> GT
      # ~%]
  [%~ positiveIntConst1 = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ positiveIntConst2 = INCLUDE _process processArg0=array.4 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
as Match::BigFloat, via {my $x = Math::BigFloat->new(\$_); $x->precision([% positiveIntConst2 %]); $x->accuracy([% positiveIntConst2 %]); $x}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                structType                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "structType" ~%]
  [%~ #
      # <structType>                 ::= STRUCT <identifier> LCURLY <memberList> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ CALL scope.push('::' _ identifier) ~%]
  [%~ memberList = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ dummy = PROCESS addSubtypeToCurrentScope addSubtypeToCurrentScopeArg0=identifier ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
subtype [% identifier %], as Dict[[% memberList %]];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ CALL scope.pop ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                forwardDcl                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "forwardDcl" ~%]
  [%~ #
      # <forwardDcl>                 ::= <abstractOrLocalMaybe> INTERFACE <identifier>
      # ~%]
  [%~ abstractOrLocalMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ fullName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim %]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
role [% fullName %] {};
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             interfaceHeader                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceHeader" ~%]
  [%~ #
      # <interfaceHeader>            ::= <abstractOrLocalMaybe> INTERFACE <identifier> <interfaceInheritanceSpecMaybe>
      # ~%]
  [%~ abstractOrLocalMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ interfaceInheritanceSpecMaybe = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ fullName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim %]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
role [% fullName %] with ([% interfaceInheritanceSpecMaybe %])
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               interfaceDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceDcl" ~%]
  [%~ #
      # <interfaceDcl>               ::= <interfaceHeader> LCURLY <interfaceBody> RCURLY
      # ~%]
  [%~ interfaceHeader = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ # the name is what is after identifier keyword ~%]
  [%~ identifier = interfaceHeader.match('\brole\s+([^\s]+)').0 ~%]
  [%~ CALL scope.push('::' _ identifier) ~%]
  [%~ interfaceBody = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% interfaceHeader %] {
  [% interfaceBody %]
}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ CALL scope.pop ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 unionType                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "unionType" ~%]
  [%~ #
      # <unionType>                  ::= UNION <identifier> SWITCH LPAREN <switchTypeSpec> RPAREN LCURLY <switchBody> RCURLY
      #
      # Note: per def <switchTypeSpec> is not a composite thing
      #
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ switchTypeSpec = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ CALL scope.push('::' _ identifier) ~%]
  [%~ switchBody = INCLUDE _process processArg0=array.7 | trim ~%]
  [%~ dummy = PROCESS addSubtypeToCurrentScope addSubtypeToCurrentScopeArg0=identifier ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
subtype [% identifier %], [% switchTypeSpec %], where {[% switchBody %]};
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ CALL scope.pop ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  enumType                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "enumType" ~%]
  [%~ #
      # <enumType>                   ::= ENUM <identifier> LCURLY <enumeratorListMany> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ enumeratorListMany = INCLUDE _process processArg0=array.3 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% identifier %] = union([qw/[% enumeratorListMany %]/])
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             declaratorListMany                             ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "declaratorListMany" ~%]
  [%~ #
      # <declaratorListMany> ::= <declarator>+ separator => <comma>
      # ~%]
  [%~ declaratorListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ declarator = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ declaratorListMany.unshift(declarator) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% declaratorListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              arrayDeclarator                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "arrayDeclarator" ~%]
  [%~ #
      # <arrayDeclarator>            ::= <identifier> <fixedArraySizeMany>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ fixedArraySizeMany = INCLUDE _process processArg0=array.1 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% identifier %][[% fixedArraySizeMany %]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  module                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "module" ~%]
  [%~ #
      # <module>                     ::= MODULE <identifier> LCURLY <definitionMany> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ fullName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim %]
  [%~ CALL root.push('::' _ identifier) ~%]
  [%~ currentFullyQualifiedScopedName = INCLUDE _currentFullyQualifiedScopedName | trim ~%]
  [%~ subtypesPerScope.currentFullyQualifiedScopedName = {} ~%]
  [%~ definitionMany = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ IF (subtypesPerScope.currentFullyQualifiedScopedName.keys.size > 0) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
role [% fullName %] {
  use MooseX::Types -declare => [qw/[% subtypesPerScope.currentFullyQualifiedScopedName.keys.join(' ') %]/];

  [% definitionMany %]
};
  [%~ ELSE ~%]
role [% fullName %] {
  [% definitionMany %]
};
  [%~ END ~%]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ CALL root.pop ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              typeDeclarator                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "typeDeclarator" ~%]
  [%~ #
      # <typeDeclarator>             ::= <typeSpec> <declarators>
      # ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ declarators = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH declarator IN declarators.split(',') ~%]
    [%~ dummy = PROCESS addSubtypeToCurrentScope addSubtypeToCurrentScopeArg0=declarator ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
subtype [% declarator %], [% typeSpec %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                valueBoxDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "valueBoxDcl" ~%]
  [%~ #
      # <valueBoxDcl>                ::= VALUETYPE <identifier> <typeSpec>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ dummy = PROCESS addSubtypeToCurrentScope addSubtypeToCurrentScopeArg0=identifier ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
subtype [% identifier %], [% typeSpec %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 exceptDcl                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "exceptDcl" ~%]
  [%~ #
      # <exceptDcl>                  ::= EXCEPTION <identifier> LCURLY <memberAny> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ memberAny = INCLUDE _process processArg0=array.3 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
role [% identifier %] with (Throwable) {
  [% memberAny %]
}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  member                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "member" ~%]
  [%~ #
      # <member>                     ::= <typeSpec> <declarators> SEMICOLON
      # ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ declarators = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH declarator IN declarators.split(',') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% declarator %]' => (as => [% typeSpec %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 constDcl                                   ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "constDcl" ~%]
  [%~ #
      # <constDcl>                   ::= CONST <constType> <identifier> EQUAL <constExp>
      # ~%]
  [%~ constType = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ constExp = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ fullName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim %]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
class [% fullName %] {
  use MooseX::ClassAttribute;
  class_has value => (is => 'ro', isa => [% constType %], default => do {[% constExp %]});
};
use [% fullName %];
our \$[% identifier %] = [% fullName %]->value;
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                definition                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "definition" ~%]
  [%~ #
      # <definition>                 ::= <typeDcl> SEMICOLON
      #                              |   <constDcl> SEMICOLON
      #                              |   <exceptDcl> SEMICOLON
      #                              |   <interface> SEMICOLON
      #                              |   <module> SEMICOLON
      #                              |   <value> SEMICOLON
      #                              |   <typeIdDcl> SEMICOLON
      #                              |   <typePrefixDcl> SEMICOLON
      #                              |   <event> SEMICOLON
      #                              |   <component> SEMICOLON
      #                              |   <homeDcl> SEMICOLON
      # ~%]
  [%~ xxxDcl = INCLUDE _process processArg0=array.0 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% xxxDcl %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                                  TOOLS                                     ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ BLOCK "_lexeme" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Outputs a lexeme value                                                   ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: lexemeArg0          an array ref of [start, length, value]        ~%]
  [%~ # ######################################################################## ~%]
[% lexemeArg0.2 %]
[%~ END ~%]

[%~ # .......................................................................... ~%]

[%~ BLOCK "_process" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Scan the AST using a stack-light model                                   ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: processArg0          an AST LHS blessed item                      ~%]
  [%~ #                                                                          ~%]
  [%~ # At every LHS, an PROCESS will be called i.e.:                            ~%]
  [%~ #                             PROCESS $lhs array                           ~%]
  [%~ # where array contains the RHS                                             ~%]
  [%~ #                                                                          ~%]
  [%~ # The call to PROCESS is surrounded by a TRY so that if a block for a      ~%]
  [%~ # given LHS does not exist, this will be silently ignored and the          ~%]
  [%~ # procedure will continue with the next LHS, in order they appear in the   ~%]
  [%~ # AST                                                                      ~%]
  [%~ #                                                                          ~%]
  [%~ # IF the PROCESS'ed block exist and puts the variable processSubtree to a  ~%]
  [%~ # false value, any subtree starting from $lhs will will be dropped.        ~%]
  [%~ # Default is to always continue for any existing PROCESS'ed bloc until     ~%]
  [%~ # there is no more blessed item. I.e. the subtree is always ending at      ~%]
  [%~ # lexemes, because they are not blessed.                                   ~%]
  [%~ # Default processSubtree is a true value at every PROCESS call.            ~%]
  [%~ #                                                                          ~%]
  [%~ # Usually an existing LHS block will put this variable to a true value if  ~%]
  [%~ # it wants the subtree to stop. Typicall usage is when current LHS is      ~%]
  [%~ # wrapping inner content. For example, ArrayRef[...]. Then it is calling   ~%]
  [%~ # explicitely the _process again, and end with setting processSubtree to a ~%]
  [%~ # true value.                                                              ~%]
  [%~ #                                                                          ~%]
  [%~ # To perform localisation, in a PROCESS'ed block you will use INCLUDE.     ~%]
  [%~ # To perform variable settings in the same context, you will use PROCESS.  ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ IF (! processArg0) ~%]
    [%~ THROW processArg0 "Missing argument" ~%]
  [%~ END ~%]
  [%~ IF (! processArg1) ~%]
    [%~ THROW processArg1 "Missing argument" ~%]
  [%~ END ~%]

  [%~ processWorklist = [ processArg0 ] %]
  [%~ WHILE processWorklist.size > 0 %]
    [%~ processObj = processWorklist.shift ~%]
    [%~ TRY ~%]
      [%~ processBlessed = ScalarUtil.blessed(processObj) ~%]
      [%~ processShortBlessedName = processBlessed.split('::').last ~%]
    [%~ CATCH ~%]
      [%~ processBlessed = '' ~%]
      [%~ processShortBlessedName = '' ~%]
    [%~ END ~%]
    [%~ IF processShortBlessedName ~%]
      [%~ processObj2array = [] ~%]
      [%~ PERL ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        [%~ # TT2 does not like blessed arrays, we provide our PERL function to get'em ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        # Store RHS list in variable 'array'
        my $arrayp = $stash->get('processObj');
        $stash->set('processObj2array', [ @{$arrayp} ]);
      [%~ END ~%]
      [%~ processSubtree = 1 ~%]
      [%~ TRY ~%]
        [%~ PROCESS $processShortBlessedName array=processObj2array ~%]
      [%~ CATCH ~%]
        [% PERL %]
          # We want to send that to STDERR immediately if it is something else but 'file error'
          # We are smart enough to tell in which BLOCK it failed -;
          # We are not smart enought to redo a Template-like exception
          my $type = $stash->get([ 'error', [ 'type' ]]);
          my $processShortBlessedName = $stash->get('processShortBlessedName');
          if (! ($type =~ /^file error/)) {
            my $info = $stash->get([ 'error', [ 'info' ]]);
            print STDERR "Error when processing $processShortBlessedName! Type: $type, Info: $info\n";
          }
        [%~ END ~%]
        [%~ CLEAR ~%]
      [%~ END ~%]
      [%~ PERL ~%]
      [%~ END ~%]
      [%~ IF processSubtree ~%]
        [%~ PERL ~%]
          [%~ # ------------------------------------------------------------------------ ~%]
          [%~ # I believe this is quicker to do the unshift myself, true ?               ~%]
          [%~ # ------------------------------------------------------------------------ ~%]
          my $arrayp = $stash->get('processObj2array');
          my $processWorklist = $stash->get('processWorklist');
          # Unshift array into processWorklist
          unshift(@{$processWorklist}, @{$arrayp});
          $stash->set('processWorklist', $processWorklist);
        [%~ END ~%]
      [%~ END ~%]
    [%~ END ~%]
    [%~ TRY ~%]
      [%~ refType = ScalarUtil.reftype(processObj) ~%]
    [%~ CATCH ~%]
      [%~ refType = '' ~%]
    [%~ END ~%]
  [%~ END ~%]

[%~ END ~%]

[%~ BLOCK _fullQualifiedScopedName %]
  [%~ # ######################################################################## ~%]
  [%~ # Returns a full qualified scoped name                                     ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: fullQualifiedScopedNameArg0          a scoped name                ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to force a fully qualified     ~%]
  [%~ # name. This is happening everytime we reference a class or a role.        ~%]
  [%~ #                                                                          ~%]
  [%~ # In any case, we remove the eventual leading '::' to allow relative       ~%]
  [%~ # namespace use.                                                           ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ IF ! fullQualifiedScopedNameArg0.match('::') ~%]
    [% fullQualifiedScopedNameArg0 = root.join('') _ '::' _ scope.join('') _ fullQualifiedScopedNameArg0 %]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% fullQualifiedScopedNameArg0.replace('^::', '') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ BLOCK _currentFullyQualifiedScopedName ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Returns the current fully qualified scoped name                          ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: N/A                                                               ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember information        ~%]
  [%~ # per fully qualified scoped name.                                         ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: the list of injected type constraints.                         ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0='' %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ BLOCK addSubtypeToCurrentScope ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add a subtype declaration into current scope                             ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: addSubtypeToCurrentScopeArg0          an identifier               ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember subtypes per scope ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: MooseX::Types -declare => [qw/.../]                            ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = INCLUDE _currentFullyQualifiedScopedName | trim ~%]
  [%~ subtypesPerScope.currentFullyQualifiedScopedName.$addSubtypeToCurrentScopeArg0 = 1 ~%]
[%~ END ~%]
