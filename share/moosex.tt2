[%~ # ######################################################################## ~%]
[%~ # TT2 is called with these variable pre-filled:                            ~%]
[%~ #                                                                          ~%]
[%~ # ast                         an AST value as returned by parse()          ~%]
[%~ # cr($n)                      Output CR x $n                               ~%]
[%~ # nl($n)                      Output NL x $n                               ~%]
[%~ # sp($n)                      Output SP x $n                               ~%]
[%~ # tab($n)                     Output TAB x $n                              ~%]
[%~ # lexeme($item)               Return lexeme string. Works ONLY on an ARRAY ~%]
[%~ #                             or on a SCALAR                               ~%]
[%~ # ######################################################################## ~%]
[%~ USE ScalarUtil ~%]
[%~ USE Dumper ~%]
[%~ # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> START <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ~%]
#!env perl

use MooseX::Declare;

[%~ INCLUDE process processArg0=ast processArg2=anything ~%]
[%~ RETURN ~%]


[%~ # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> END <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                       TEMPLATE TOOLKIT TOOLS                               ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ BLOCK process ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Scan the AST using a stack-light model                                   ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: processArg0          an AST blessed hash item or lexeme array     ~%]
  [%~ # Input: processArg1          the named of a "want" procedure INCLUDE'ed   ~%]
  [%~ #                             This will be called like this:               ~%]
  [%~ #                             INCLUDE $processArg1                         ~%]
  [%~ #                               wantedArg0=obj                             ~%]
  [%~ #                               wantedArg1=wanted                          ~%]
  [%~ #                             Any true wanted value will mean: accepted    ~%]
  [%~ #                             Default is to want everything                ~%]
  [%~ # Input: processArg2          the named of a "call" procedure INCLUDE'ed   ~%]
  [%~ #                             This will be called like this:               ~%]
  [%~ #                             INCLUDE $processArg2                         ~%]
  [%~ #                               callArg0=obj                               ~%]
  [%~ #                             Default is to call nothing                   ~%]
  [%~ # ######################################################################## ~%]
  [%~ IF (! processArg0) ~%]
    [%~ THROW processArg0 "Missing argument" ~%]
  [%~ END ~%]
  [%~ worklist = [ processArg0 ] %]
  [%~ WHILE worklist.size > 0 %]
    [%~ obj = worklist.shift ~%]
    [%~ IF processArg1 ~%]
      [%~ INCLUDE $processArg1 wantedArg0=obj wantedArg1='wanted' ~%]
    [%~ ELSE ~%]
      [%~ wanted = 1 ~%]
    [%~ END ~%]
    [%~ IF wanted ~%]
      [%~ IF processArg2 ~%]
        [%~ INCLUDE $processArg2 callArg0=obj ~%]
      [%~ END ~%]
    [%~ END ~%]
    [%~ refType = ScalarUtil.reftype(obj) ~%]
    [%~ IF (ScalarUtil.blessed(obj) || refType == 'ARRAY') ~%]
      [%~ obj2array = [] ~%]
      [%~ PERL ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        [%~ # TT2 does not like blessed arrays, we provide our PERL function to get'em ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        my $worklist = $stash->get('worklist');
        my $arrayp = $stash->get('obj');
        unshift(@{$worklist}, @{$arrayp});
        $stash->set('worklist', $worklist);
      [%~ END ~%]
    [%~ ELSE ~%]
      [%~ IF refType ~%]
        [%~ THROW reftype $obj ~%]
      [%~ ELSE ~%]
        [%~ # This is a lexeme: [ start, length, value ], and we already unshifted 'start' ~%]
[% dummy = worklist.shift %] [% worklist.shift %] 
      [%~ END ~%]
    [%~ END ~%]
  [%~ END ~%]
[%~ END ~%]
