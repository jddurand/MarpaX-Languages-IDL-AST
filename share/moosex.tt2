[%~ # ######################################################################## ~%]
[%~ # TT2 is called with these variable pre-filled:                            ~%]
[%~ #                                                                          ~%]
[%~ # ast                         an AST value as returned by parse()          ~%]
[%~ # cr($n)                      Output CR x $n                               ~%]
[%~ # nl($n)                      Output NL x $n                               ~%]
[%~ # sp($n)                      Output SP x $n                               ~%]
[%~ # tab($n)                     Output TAB x $n                              ~%]
[%~ #                                                                          ~%]
[%~ # Notes:                                                                   ~%]
[%~ # - raisesExpr on attributes is ignored                                    ~%]
[%~ # - valuetype is mapped to a role                                          ~%]
[%~ # - contextExpression in an op is ignored                                  ~%]
[%~ # - paramAttribute IN/OUT/INOUT is ignored                                 ~%]
[%~ #                                                                          ~%]
[%~ #                                                                          ~%]
[%~ # ######################################################################## ~%]
[%~ USE ScalarUtil ~%]
[%~ USE PerlTidy ~%]
[%~ FILTER $PerlTidy ~%]
[%~ # Internal variables ~%]
[%~ root = [] ~%]
[%~ scope = [] ~%]
#!env perl
use Modern::Perl;

[% PROCESS _process processArg0=ast
            processArg1='specification'
            subTtypesPerScope={}
            mooseUtilTypeConstraintsPerScope={}
            moosexParamsValidatePerScope={}
            moosexTypesStructuredPerScope={}
            withPerScope={}
            usePerScope={}
            namespaceTypePerscope={}
            scopednamePerscope={}
            | $PerlTidy %]

1;
[%~ END ~%]

[%~ # ************************************************************************** ~%]
[%~ #                       TEMPLATE TOOLKIT TOOLS                               ~%]
[%~ # ************************************************************************** ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                         LEXEMES OF INTEREST                                ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ # ..................   Variable Lexemes .................................... ~%]

[%~ # Per def we decide that a scopedName is always prepended with '$'    ~%]
[%~ # This is always true with one exception: when it refers to a package ~%]
[%~ # i.e. in the with() section.                                         ~%]
[%~ BLOCK "scopedName"            ~%][%#~%]\$[% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "IDENTIFIER"            ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "STRINGLITERALUNIT"     ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "WIDESTRINGLITERALUNIT" ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "CHARACTERLITERAL"      ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "WIDECHARACTERLITERAL"  ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "ICONSTANT"             ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]
[%~ BLOCK "CPPSTYLEDIRECTIVE"     ~%][%#~%][% PROCESS _lexeme lexemeArg0=array %][%#~%][%~ END ~%]

[%~ # ..................   Constant Lexemes .................................... ~%]

[%~ BLOCK "OR"        ~%][%#~%]|[%#~%] [%~ END ~%]
[%~ BLOCK "XOR"       ~%][%#~%]^[%#~%] [%~ END ~%]
[%~ BLOCK "AND"       ~%][%#~%]&[%#~%] [%~ END ~%]
[%~ BLOCK "RSHIFT"    ~%][%#~%]>>[%#~%][%~ END ~%]
[%~ BLOCK "LSHIFT"    ~%][%#~%]<<[%#~%][%~ END ~%]
[%~ BLOCK "PLUS"      ~%][%#~%]+[%#~%] [%~ END ~%]
[%~ BLOCK "MINUS"     ~%][%#~%]-[%#~%] [%~ END ~%]
[%~ BLOCK "MUL"       ~%][%#~%]*[%#~%] [%~ END ~%]
[%~ BLOCK "DIV"       ~%][%#~%]/[%#~%] [%~ END ~%]
[%~ BLOCK "MOD"       ~%][%#~%]%[%#~%] [%~ END ~%]
[%~ BLOCK "TILDE"     ~%][%#~%]~[%#~%] [%~ END ~%]
[%~ BLOCK "SEMICOLON" ~%][%#~%];[%#~%] [%~ END ~%]
[%~ BLOCK "TRUE"      ~%][%#~%]1[%#~%] [%~ END ~%]
[%~ BLOCK "FALSE"     ~%][%#~%]0[%#~%] [%~ END ~%]
[%~ BLOCK "VOID"      ~%][%#~%]void[%#~%] [%~ END ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                           RULES OF INTEREST                                ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ BLOCK "importedScope" ~%]
  [%~ #
      # <importedScope>              ::= <scopedName>
      #                              |   <stringLiteral>
      # ~%]
  [%~ importedScope = INCLUDE _process processArg0=array.0 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
load [% importedScope %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 %]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             baseTypeSpec                                   ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "floatingPtType" ~%]      [%#~%]\$_floatingPtType[%#~%]      [%~ processSubtree = 0; END ~%]
[%~ BLOCK "signedShortInt" ~%]      [%#~%]\$_signedShortInt[%#~%]      [%~ processSubtree = 0; END ~%]
[%~ BLOCK "signedLongInt" ~%]       [%#~%]\$_signedLongInt[%#~%]       [%~ processSubtree = 0; END ~%]
[%~ BLOCK "signedLonglongInt" ~%]   [%#~%]\$_signedLonglongInt[%#~%]   [%~ processSubtree = 0; END ~%]
[%~ BLOCK "unsignedShortInt" ~%]    [%#~%]\$_unsignedShortInt[%#~%]    [%~ processSubtree = 0; END ~%]
[%~ BLOCK "unsignedLongInt" ~%]     [%#~%]\$_unsignedLongInt[%#~%]     [%~ processSubtree = 0; END ~%]
[%~ BLOCK "unsignedLonglongInt" ~%] [%#~%]\$_unsignedLonglongInt[%#~%] [%~ processSubtree = 0; END ~%]
[%~ BLOCK "charType" ~%]            [%#~%]\$_charType[%#~%]            [%~ processSubtree = 0; END ~%]
[%~ BLOCK "wideCharType" ~%]        [%#~%]\$_wideCharType[%#~%]        [%~ processSubtree = 0; END ~%]
[%~ BLOCK "booleanType" ~%]         [%#~%]\$_booleanType[%#~%]         [%~ processSubtree = 0; END ~%]
[%~ BLOCK "octetType" ~%]           [%#~%]\$_octetType[%#~%]           [%~ processSubtree = 0; END ~%]
[%~ BLOCK "anyType" ~%]             [%#~%]\$_anyType[%#~%]             [%~ processSubtree = 0; END ~%]
[%~ BLOCK "objectType" ~%]          [%#~%]\$_objectType[%#~%]          [%~ processSubtree = 0; END ~%]
[%~ BLOCK "valueBaseType" ~%]       [%#~%]\$_valueBaseType[%#~%]       [%~ processSubtree = 0; END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             templateTypeSpec                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "sequenceType" ~%]
  [%~ #
      # <sequenceType>               ::= SEQUENCE LT <simpleTypeSpec> COMMA <positiveIntConst> GT
      #                              | SEQUENCE LT <simpleTypeSpec> GT
      # ~%]
  [%~ simpleTypeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ PROCESS _addMooseUtilTypeConstraintsToCurrentScope ~%]
  [%~ IF array.size == 6 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.4 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
ArrayRef[[% simpleTypeSpec %]], where => {scalar(@_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
ArrayRef[[% simpleTypeSpec %]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               wideStringType                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "wideStringType" ~%]
  [%~ #
      # <wideStringType>             ::= WSTRING LT <positiveIntConst> GT
      #                              | WSTRING
      # ~%]
  [%~ IF array.size == 4 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
wideStringType, where => {length(\$_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
wideStringType
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 stringType                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "stringType" ~%]
  [%~ #
      # <stringType>                 ::= STRING LT <positiveIntConst> GT
      #                              | STRING
      # ~%]
  [%~ IF array.size == 4 ~%]
    [%~ positiveIntConst = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
charType, where => {length(\$_) <= [% positiveIntConst %]}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
charType
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                fixedPtType                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "fixedPtType" ~%]
  [%~ #
      # <fixedPtType>                ::= FIXED LT <positiveIntConst> COMMA <positiveIntConst> GT
      # ~%]
  [%~ positiveIntConst1 = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ positiveIntConst2 = INCLUDE _process processArg0=array.4 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
floatingPtType, via {my $x = Math::BigFloat->new(\$_); $x->precision([% positiveIntConst2 %]); $x->accuracy([% positiveIntConst2 %]); $x}
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                structType                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "structType" ~%]
  [%~ #
      # <structType>                 ::= STRUCT <identifier> LCURLY <memberList> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ CALL scope.push('::' _ identifier) ~%]
  [%~ memberList = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ CALL scope.pop ~%]
  [%~ PROCESS _addMoosexTypesStructuredToCurrentScope $addMooseyTypesStructuredToCurrentScopeArg0='Dict' ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='subtype({as => "Dict[' _ memberList _ ']"}' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                forwardDcl                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "forwardDcl" ~%]
  [%~ #
      # <forwardDcl>                 ::= <abstractOrLocalMaybe> INTERFACE <identifier>
      # ~%]
  [%~ abstractOrLocalMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ forwardFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ PROCESS _addMooseUtilTypeConstraintsToCurrentScope ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type({role => "' _ forwardFullyQualifiedScopedName _ '"})' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             interfaceHeader                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceHeader" ~%]
  [%~ #
      # <interfaceHeader>            ::= <abstractOrLocalMaybe> INTERFACE <identifier> <interfaceInheritanceSpecMaybe>
      # ~%]
  [%~ abstractOrLocalMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ interfaceFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ PROCESS _addMooseUtilTypeConstraintsToCurrentScope ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type({role => "' _ interfaceFullyQualifiedScopedName _ '"})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier namespaceArg2='' ~%]
  [%~ interfaceInheritanceSpecMaybe = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               interfaceDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceDcl" ~%]
  [%~ #
      # <interfaceDcl>               ::= <interfaceHeader> LCURLY <interfaceBody> RCURLY
      # ~%]
  [%~ # Take care: it is interfaceHeader that will initialize the namespace ~%]
  [%~ INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ interfaceBody = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ PROCESS _printCurrentRole currentRoleArg0=interfaceBody ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               interfaceName                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "interfaceName" ~%]
  [%~ #
      # <interfaceName>              ::= <scopedName>
      # ~%]
  [%~ scopedName = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ # This is a special case. We want the with() to be inserted in the new namespace ~%]
  [%~ # but we want the resolving to be done with the namespace just upper ~%]
  [%~ # Per def we either in an interface or a valuetype, i.e. in a scope namespace ~%]
  [%~ lastScopeId = scope.pop ~%]
  [%~ fullQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=scopedName ~%]
  [%~ CALL scope.push(lastScopeId) ~%]
  [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=fullQualifiedScopedName ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  enumType                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "enumType" ~%]
  [%~ #
      # <enumType>                   ::= ENUM <identifier> LCURLY <enumeratorListMany> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ enumeratorListMany = INCLUDE _process processArg0=array.3 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% identifier %] = union([qw/[% "\n" _ enumeratorListMany _ "\n" %]/])
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                             declaratorListMany                             ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "declaratorListMany" ~%]
  [%~ #
      # <declaratorListMany> ::= <declarator>+ separator => <comma>
      # ~%]
  [%~ declaratorListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ declarator = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ declaratorListMany.unshift(declarator) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% declaratorListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                          simpleDeclaratorListMany                          ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "simpleDeclaratorListMany" ~%]
  [%~ #
      # <simpleDeclaratorListMany> ::= <simpleDeclarator>+ separator => <comma>
      # ~%]
  [%~ simpleDeclaratorListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ simpleDeclarator = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ simpleDeclaratorListMany.unshift(simpleDeclarator) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% simpleDeclaratorListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              paramDclListMany                              ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "paramDclListMany" ~%]
  [%~ #
      # <paramDclListMany> ::= <paramDcl>+ separator => <comma>
      # ~%]
  [%~ paramDclListMany = [] ~%]
  [%~ FOREACH rhs IN array ~%]
    [%~ paramDcl = INCLUDE _process processArg0=rhs | trim ~%]
    [%~ paramDclListMany.push(paramDcl) ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% paramDclListMany.join(',') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              arrayDeclarator                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "arrayDeclarator" ~%]
  [%~ #
      # <arrayDeclarator>            ::= <identifier> <fixedArraySizeMany>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ fixedArraySizeMany = INCLUDE _process processArg0=array.1 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
\$[% identifier %][[% fixedArraySizeMany %]]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  module                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "module" ~%]
  [%~ #
      # <module>                     ::= MODULE <identifier> LCURLY <definitionMany> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='root' namespaceArg1=identifier namespaceArg2='' ~%]
  [%~ definitionMany = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS _printCurrentRole currentRoleArg0=definitionMany ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='root' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                              typeDeclarator                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "typeDeclarator" ~%]
  [%~ #
      # <typeDeclarator>             ::= <typeSpec> <declarators>
      # ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ declarators = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH declarator IN declarators.split(',') ~%]
    [%~ PROCESS _printScopedname scopednameArg0=declarator scopednameArg1='subtype({as => "' _ typeSpec _ '"})' ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                valueBoxDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "valueBoxDcl" ~%]
  [%~ #
      # <valueBoxDcl>                ::= VALUETYPE <identifier> <typeSpec>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='subtype({as => "' _ typeSpec _ '"})' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                valueAbsDcl                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "valueAbsDcl" ~%]
  [%~ #
      # ABSTRACT VALUETYPE <identifier> <valueInheritanceSpecMaybe> LCURLY <exportAny> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ valueFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ PROCESS _addMooseUtilTypeConstraintsToCurrentScope ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type({role => "' _ valueFullyQualifiedScopedName _ '"})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier namespaceArg2='' ~%]
  [%~ valueInheritanceSpecMaybe = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ exportAny = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ PROCESS _printCurrentRole currentRoleArg0=exportAny ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                          supportedInterfaceSpec                            ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "supportedInterfaceSpec" ~%]
  [%~ #
      # <supportedInterfaceSpec>     ::= SUPPORTS <scopedNameListMany>
      # ~%]
  [%~ scopedNameListMany = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH scopedName IN scopedNameListMany.split(',') ~%]
    [%~ fullQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=scopedName ~%]
    [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=fullQualifiedScopedName ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                       valueInheritanceSpec1Values                          ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "valueInheritanceSpec1Values" ~%]
  [%~ #
      # <valueInheritanceSpec1Values> ::= COLON <truncatableMaybe> <valueNameListMany>
      # ~%]
  [%~ valueNameListMany = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ FOREACH valueName IN valueNameListMany.split(',') ~%]
    [%~ fullQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=valueName ~%]
    [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0=fullQualifiedScopedName ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 exceptDcl                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "exceptDcl" ~%]
  [%~ #
      # <exceptDcl>                  ::= EXCEPTION <identifier> LCURLY <memberAny> RCURLY
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ exceptFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ PROCESS _addMooseUtilTypeConstraintsToCurrentScope ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type({role => "' _ exceptFullyQualifiedScopedName _ '"})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier namespaceArg2='' ~%]
  [%~ memberAny = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ PROCESS _addWithToCurrentScope withToCurrentScopeArg0='Throwable' ~%]
  [%~ PROCESS _printCurrentRole currentRoleArg0=memberAny ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  member                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "member" ~%]
  [%~ #
      # <member>                     ::= <typeSpec> <declarators> SEMICOLON
      # ~%]
  [%~ typeSpec = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ declarators = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ FOREACH declarator IN declarators.split(',') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% declarator %]' => (as => [% typeSpec %]);
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                 constDcl                                   ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "constDcl" ~%]
  [%~ #
      # <constDcl>                   ::= CONST <constType> <identifier> EQUAL <constExp>
      # ~%]
  [%~ constType = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ constExp = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ constFullyQualifiedScopedName = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=identifier | trim ~%]
  [%~ PROCESS _addMooseUtilTypeConstraintsToCurrentScope ~%]
  [%~ PROCESS _printScopedname scopednameArg0=identifier scopednameArg1='role_type({role => "' _ constFullyQualifiedScopedName _ '"})' ~%]
  [%~ PROCESS _initNameSpace namespaceArg0='scope' namespaceArg1=identifier namespaceArg2='' ~%]
  [%~ PROCESS _addUseToCurrentNamespace useToCurrentScopeArg0='MooseX::ClassAttribute' ~%]
  [%~ dummy = 'class_has "' _ identifier _ '" => (is => "ro", isa => "' _ constType _ '", default => do {' _ constExp _ '});' ~%]
  [%~ PROCESS _printCurrentRole currentRoleArg0=dummy ~%]
  [%~ PROCESS _closeLastNameSpace lastNamespaceArg0='scope' ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                            readonlyAttrSpec                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "readonlyAttrSpec" ~%]
  [%~ #
      # <readonlyAttrSpec>           ::= READONLY ATTRIBUTE <paramTypeSpec> <readonlyAttrDeclarator>
      # ~%]
  [%~ paramTypeSpec = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ readonlyAttrDeclarator = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ FOREACH attr IN readonlyAttrDeclarator.split(',') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% attr %]' => (is => 'ro', isa => "[% paramTypeSpec %]");
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                attrSpec                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "attrSpec" ~%]
  [%~ #
      # <attrSpec>                   ::= ATTRIBUTE <paramTypeSpec> <attrDeclarator>
      # ~%]
  [%~ paramTypeSpec = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ attrDeclarator = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ FOREACH attr IN attrDeclarator.split(',') ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
has '[% attr %]' => (is => 'rw', isa => "[% paramTypeSpec %]");
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                  opDcl                                     ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "opDcl" ~%]
  [%~ #
      # <opDcl>                      ::= <opAttributeMaybe> <opTypeSpec> <identifier> <parameterDcls> <raisesExprMaybe> <contextExprMaybe>
      # ~%]
  [%~ opAttributeMaybe = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ opTypeSpec = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ identifier = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ parameterDcls = INCLUDE _process processArg0=array.3 | trim ~%]
  [%~ # raisesExprMaybe = INCLUDE _process processArg0=array.4 | trim ~%]
  [%~ # contextExprMaybe = INCLUDE _process processArg0=array.5 | trim ~%]
  [%~ PROCESS _addMoosexParamsValidateToCurrentScope ~%]
  [%~ parameters = [] ~%]
  [%~ paramTypeSpec = [] ~%]
  [%~ FOREACH parameter IN parameterDcls.split(',') ~%]
    [%~ parameters.push('$' _ parameter.split(' ').last) ~%]
    [%~ paramTypeSpec.push(parameter.split(' ').first) ~%]
  [%~ END ~%] 
  [%~ IF (parameters.size > 0) ~%]
    [%~ pos_validated_list = 'my (' _ parameters.join(',') _ ') = pos_validated_list(\\@_, ' ~%]
    [%~ FOREACH parameter IN parameters ~%]
      [%~ index = loop.index() ~%]
      [%~ IF (index > 0) ~%]
        [%~ pos_validated_list = pos_validated_list _ ',' ~%]
      [%~ END ~%]
      [%~ pos_validated_list = pos_validated_list _ '{does => "' _ paramTypeSpec.$index _ '"}' ~%]
    [%~ END ~%]
    [%~ pos_validated_list = pos_validated_list _ ');' ~%]
  [%~ ELSE ~%]
    [%~ pos_validated_list = '' ~%]
  [%~ END ~%]
  [%~ IF (opTypeSpec != 'void') ~%]
     [%~ rc_validated_list = 'my ($rc) = pos_validated_list([ $self->$orig(' _ parameters.join(',') _ ') ], {does => "' _ opTypeSpec _ '"});' ~%]
  [%~ ELSE ~%]
     [%~ rc_validated_list = 'my $rc = $self->$orig(' _ parameters.join(',') _ ');' ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
requires '[% identifier %]';
around '[% identifier %]' => sub {
  my \$orig = shift;
  my \$self = shift;
  [% pos_validated_list %]
  [% rc_validated_list %]
  return \$rc;
};
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                paramDcl                                    ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "paramDcl" ~%]
  [%~ #
      # <paramDcl>                   ::= <paramAttribute> <paramTypeSpec> <simpleDeclarator>
      # ~%]
  [%~ paramAttribute = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ paramTypeSpec = INCLUDE _process processArg0=array.1 | trim ~%]
  [%~ simpleDeclarator = INCLUDE _process processArg0=array.2 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% paramTypeSpec %] [% simpleDeclarator %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                            simpleDeclarator                                ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "simpleDeclarator" ~%]
  [%~ #
      # <simpleDeclarator>           ::= <identifier>
      # ~%]
  [%~ identifier = INCLUDE _process processArg0=array.0 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% identifier %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                          supportedCppCommand                               ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "supportedCppCommand" ~%]
  [%~ #
      # <supportedCppCommand>        ::= CPPSTYLEDIRECTIVE
      # ~%]
  [%~ supportedCppCommand = INCLUDE _process processArg0=array.0 | trim ~%]
  [%~ IF (matches = supportedCppCommand.match('#[\s]*include[\s]+"([^"]+)"')) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
use [% matches.0.replace('\.idl', '') %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSIF (matches = supportedCppCommand.match('#[\s]*pragma[\s]+prefix[\s]+"([^"]+)"')) ~%]
    [%~ CALL root.push(matches.0.replace('\.', '::')) ~%]
  [%~ END ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                               pragmaPrefix                                 ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "pragmaPrefix" ~%]
  [%~ #
      # <pragmaPrefix>               ::= PRAGMA PREFIX <stringLiteral>
      # ~%]
  [%~ stringLiteral = INCLUDE _process processArg0=array.2 | trim ~%]
  [%~ CALL root.push(stringLiteral.replace('"', '')) ~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # .......................................................................... ~%]
[%~ #                                definition                                  ~%]
[%~ # .......................................................................... ~%]

[%~ BLOCK "definition" ~%]
  [%~ #
      # <definition>                 ::= <typeDcl> SEMICOLON
      #                              |   <constDcl> SEMICOLON
      #                              |   <exceptDcl> SEMICOLON
      #                              |   <interface> SEMICOLON
      #                              |   <module> SEMICOLON
      #                              |   <value> SEMICOLON
      #                              |   <typeIdDcl> SEMICOLON
      #                              |   <typePrefixDcl> SEMICOLON
      #                              |   <event> SEMICOLON
      #                              |   <component> SEMICOLON
      #                              |   <homeDcl> SEMICOLON
      # ~%]
  [%~ xxxDcl = INCLUDE _process processArg0=array.0 | trim ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% xxxDcl %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ processSubtree = 0 ~%]
[%~ END ~%]

[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]
[%~ #                                  TOOLS                                     ~%]
[%~ # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ~%]

[%~ BLOCK "_lexeme" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Outputs a lexeme value                                                   ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: lexemeArg0          an array ref of [start, length, value]        ~%]
  [%~ # ######################################################################## ~%]
[% lexemeArg0.2 %]
[%~ END ~%]

[%~ # .......................................................................... ~%]

[%~ BLOCK "_process" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Scan the AST using a stack-light model                                   ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: processArg0          an AST LHS blessed item                      ~%]
  [%~ #                                                                          ~%]
  [%~ # At every LHS, an PROCESS will be called i.e.:                            ~%]
  [%~ #                             PROCESS $lhs array                           ~%]
  [%~ # where array contains the RHS                                             ~%]
  [%~ #                                                                          ~%]
  [%~ # The call to PROCESS is surrounded by a TRY so that if a block for a      ~%]
  [%~ # given LHS does not exist, this will be silently ignored and the          ~%]
  [%~ # procedure will continue with the next LHS, in order they appear in the   ~%]
  [%~ # AST                                                                      ~%]
  [%~ #                                                                          ~%]
  [%~ # IF the PROCESS'ed block exist and puts the variable processSubtree to a  ~%]
  [%~ # false value, any subtree starting from $lhs will will be dropped.        ~%]
  [%~ # Default is to always continue for any existing PROCESS'ed bloc until     ~%]
  [%~ # there is no more blessed item. I.e. the subtree is always ending at      ~%]
  [%~ # lexemes, because they are not blessed.                                   ~%]
  [%~ # Default processSubtree is a true value at every PROCESS call.            ~%]
  [%~ #                                                                          ~%]
  [%~ # Usually an existing LHS block will put this variable to a true value if  ~%]
  [%~ # it wants the subtree to stop. Typicall usage is when current LHS is      ~%]
  [%~ # wrapping inner content.                                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # To perform localisation, in a PROCESS'ed block you will use INCLUDE.     ~%]
  [%~ # To perform variable settings in the same context, you will use PROCESS.  ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ IF (! processArg0) ~%]
    [%~ THROW processArg0 "Missing argument" ~%]
  [%~ END ~%]
  [%~ IF (! processArg1) ~%]
    [%~ THROW processArg1 "Missing argument" ~%]
  [%~ END ~%]

  [%~ processWorklist = [ processArg0 ] %]
  [%~ WHILE processWorklist.size > 0 %]
    [%~ processObj = processWorklist.shift ~%]
    [%~ TRY ~%]
      [%~ processBlessed = ScalarUtil.blessed(processObj) ~%]
      [%~ processShortBlessedName = processBlessed.split('::').last ~%]
    [%~ CATCH ~%]
      [%~ processBlessed = '' ~%]
      [%~ processShortBlessedName = '' ~%]
    [%~ END ~%]
    [%~ IF processShortBlessedName ~%]
      [%~ processObj2array = [] ~%]
      [%~ PERL ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        [%~ # TT2 does not like blessed arrays, we provide our PERL function to get'em ~%]
        [%~ # ------------------------------------------------------------------------ ~%]
        # Store RHS list in variable 'array'
        my $arrayp = $stash->get('processObj');
        $stash->set('processObj2array', [ @{$arrayp} ]);
      [%~ END ~%]
      [%~ processSubtree = 1 ~%]
      [%~ TRY ~%]
        [%~ PROCESS $processShortBlessedName array=processObj2array ~%]
      [%~ CATCH ~%]
        [% PERL %]
          # We want to send that to STDERR immediately if it is something else but 'file error'
          # We are smart enough to tell in which BLOCK it failed -;
          # We are not smart enought to redo a Template-like exception
          my $type = $stash->get([ 'error', [ 'type' ]]);
          my $processShortBlessedName = $stash->get('processShortBlessedName');
          if (! ($type =~ /^file error/)) {
            my $info = $stash->get([ 'error', [ 'info' ]]);
            print STDERR "Error when processing $processShortBlessedName! Type: $type, Info: $info\n";
          }
        [%~ END ~%]
        [%~ CLEAR ~%]
      [%~ END ~%]
      [%~ PERL ~%]
      [%~ END ~%]
      [%~ IF processSubtree ~%]
        [%~ PERL ~%]
          [%~ # ------------------------------------------------------------------------ ~%]
          [%~ # I believe this is quicker to do the unshift myself, true ?               ~%]
          [%~ # ------------------------------------------------------------------------ ~%]
          my $arrayp = $stash->get('processObj2array');
          my $processWorklist = $stash->get('processWorklist');
          # Unshift array into processWorklist
          unshift(@{$processWorklist}, @{$arrayp});
          $stash->set('processWorklist', $processWorklist);
        [%~ END ~%]
      [%~ END ~%]
    [%~ END ~%]
    [%~ TRY ~%]
      [%~ refType = ScalarUtil.reftype(processObj) ~%]
    [%~ CATCH ~%]
      [%~ refType = '' ~%]
    [%~ END ~%]
  [%~ END ~%]

[%~ END ~%]

[%~ BLOCK "_fullQualifiedScopedName" %]
  [%~ # ######################################################################## ~%]
  [%~ # Returns a full qualified scoped name                                     ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: fullQualifiedScopedNameArg0          a scoped name                ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to force a fully qualified     ~%]
  [%~ # name. This is happening everytime we reference a class or a role.        ~%]
  [%~ #                                                                          ~%]
  [%~ # In any case, we remove the eventual leading '::' to allow relative       ~%]
  [%~ # namespace use.                                                           ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ IF (! fullQualifiedScopedNameArg0.match('::')) ~%]
    [% qualifiedScopedName = root.join('') _ scope.join('') ~%]
    [%~ IF (fullQualifiedScopedNameArg0 != '') ~%]
      [% qualifiedScopedName = qualifiedScopedName _ '::' _ fullQualifiedScopedNameArg0 ~%]
    [%~ END ~%]
  [%~ ELSE ~%]
    [% qualifiedScopedName = fullQualifiedScopedNameArg0 ~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% qualifiedScopedName.replace('^::', '') %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ BLOCK "_currentFullyQualifiedScopedName" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Returns the current fully qualified scoped name                          ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: N/A                                                               ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember information        ~%]
  [%~ # per fully qualified scoped name.                                         ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: the list of injected type constraints.                         ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
[% PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0='' %]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ BLOCK "_addMooseUtilTypeConstraintsToCurrentScope" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add moose type constraint dependency                                     ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: N/A                                                               ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to create type constraints     ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: subtype ...                                                    ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ mooseUtilTypeConstraintsPerScope.$currentFullyQualifiedScopedName = 1 ~%]
[%~ END ~%]

[%~ BLOCK "_addMoosexParamsValidateToCurrentScope" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add moose method signatures  dependency                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: N/A                                                               ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to create an around constraints~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: around '...' {}                                                ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ moosexParamsValidatePerScope.$currentFullyQualifiedScopedName = 1 ~%]
[%~ END ~%]

[%~ BLOCK "_addMoosexTypesStructuredToCurrentScope" ~%]
  [%~ # ################################################################################### ~%]
  [%~ # Add a moose type declaration into current scope                                     ~%]
  [%~ #                                                                                     ~%]
  [%~ # Input: _addMoosexTypesStructuredToCurrentScopeArg0  a MooseX::Types::Structured type ~%]
  [%~ #                                                                                     ~%]
  [%~ # This block is used in cases where we want to remember moose types                   ~%]
  [%~ #                                                                                     ~%]
  [%~ # Use case: MooseX::Types::Moose qw/.../                                              ~%]
  [%~ #                                                                                     ~%]
  [%~ # ################################################################################### ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ moosexTypesStructuredPerScope.$currentFullyQualifiedScopedName.$addMooseyTypesStructuredToCurrentScopeArg0 = 1 ~%]
[%~ END ~%]

[%~ BLOCK "_addWithToCurrentScope" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add a with() dependency into current scope                               ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: withToCurrentScopeArg0          a role                            ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember with() per scope   ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: with 'Something', 'Else', ...                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ withToCurrentScopeArg0 = withToCurrentScopeArg0.replace('\$', '') | trim ~%]

  [%~ withPerScope.$currentFullyQualifiedScopedName.push('"' _ withToCurrentScopeArg0 _ '"') ~%]
[%~ END ~%]

[%~ BLOCK "_addUseToCurrentNamespace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Add a use dependency into current scope                                  ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: useToCurrentScopeArg0          a use (full with its import)       ~%]
  [%~ #                                                                          ~%]
  [%~ # This block is used in cases where we want to remember use per scope      ~%]
  [%~ #                                                                          ~%]
  [%~ # Use case: use Something 'option'                                         ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ usePerScope.$currentFullyQualifiedScopedName.push(useToCurrentScopeArg0)    ~%]
[%~ END ~%]

[%~ BLOCK "_printRole" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # print a role block (everything is a role here)                           ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: roleArg0               Fully Qualified block name                 ~%]
  [%~ #        roleArg1               content                                    ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ # We want to remember role full name within this scope unless it is already fully qualified ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
package [% roleArg0 %] {
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  use [% (namespaceTypePerscope.$roleArg0 == 'class') ? 'Moose' : 'Moose::Role' %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ IF (subTtypesPerScope.$roleArg0.keys.size > 0) ~%]
    [%~ usePerScope.$roleArg0.unshift("MooseX::Types -declare => [qw/\n" _ subTtypesPerScope.$roleArg0.keys.sort.join("\n") _ "\n/]") ~%]
  [%~ END ~%]
  [%~ IF (mooseUtilTypeConstraintsPerScope.$roleArg0 != 0) ~%]
    [%~ usePerScope.$roleArg0.unshift('Moose::Util::TypeConstraints') ~%]
  [%~ END ~%]
  [%~ IF (moosexParamsValidatePerScope.$roleArg0 != 0) ~%]
    [%~ usePerScope.$roleArg0.unshift('MooseX::Params::Validate qw/pos_validated_list/') ~%]
  [%~ END ~%]
  [%~ IF (moosexTypesStructuredPerScope.$roleArg0.keys.size > 0) ~%]
    [%~ usePerScope.$roleArg0.unshift("MooseX::Types::Structured [qw/\n" _ moosexTypesStructuredPerScope.$roleArg0.keys.sort.join("\n") _ "\n/]") ~%]
  [%~ END ~%]
  [%~ FOREACH use IN usePerScope.$roleArg0 ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
use [% use %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
  [%~ IF (roleArg1 != '') ~%]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[% roleArg1 %]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
  [%~ END ~%]
  [%# We defer with list at the very end ~%]
  [%~ IF (withPerScope.$roleArg0.size > 0) ~%]
[%#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~%]
with [% withPerScope.$roleArg0.sort.join(', ') %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ END ~%]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
};
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
[%~ END ~%]

[%~ BLOCK "_printCurrentRole" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # print current role block                                                 ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: currentRoleArg0        content                                    ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ PROCESS _printRole roleArg0=currentFullyQualifiedScopedName roleArg1=currentRoleArg0 ~%]
[%~ END ~%]

[%~ BLOCK "_initNameSpace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # Initalize a new namespace (root or scope)                                ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: namespaceArg0        namespace type: root or scope                ~%]
  [%~ #        namespaceArg1        namespace basename                           ~%]
  [%~ #        namespaceArg2        Can be 'nodefault'                           ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ fullname = PROCESS _fullQualifiedScopedName fullQualifiedScopedNameArg0=namespaceArg1 | trim %]
  [%~ previousFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ SWITCH namespaceArg0 ~%]
    [%~ CASE 'root' ~%]
      [%~ CALL root.push('::' _ namespaceArg1) ~%]
    [%~ CASE 'scope' ~%]
      [%~ CALL scope.push('::' _ namespaceArg1) ~%]
    [%~ CASE ~%]
      [%~ THROW namespaceArg0 "Bad argument: must be root or scope instead of " _ namespaceArg0 ~%]  
  [%~ END ~%]
  [%~ namespaceTypePerscope.$fullname = (namespaceArg0 == 'root') ? 'class' : 'role' ~%]
  [%~ IF (namespaceArg2 == 'nodefault') ~%]
    [%~ subTtypesPerScope.$fullname = {} ~%]
    [%~ mooseUtilTypeConstraintsPerScope.$fullname = 0 ~%]
    [%~ moosexTypesStructuredPerScope.$fullname = {} ~%]
    [%~ moosexParamsValidatePerScope.$fullname = 0 ~%]
    [%~ withPerScope.$fullname = [] ~%]
    [%~ usePerScope.$fullname = []  ~%]
  [%~ ELSE ~%]
    [%~ subTtypesPerScope.$fullname = {} ~%]
    [%~ mooseUtilTypeConstraintsPerScope.$fullname = 0 ~%]
    [%~ moosexTypesStructuredPerScope.$fullname = {} ~%]
    [%~ moosexParamsValidatePerScope.$fullname = 0 ~%]
    [%~ withPerScope.$fullname = [] # The with ordering can be important ~%]
    [%~ usePerScope.$fullname = ['MarpaX::Languages::IDL::AST::MooseX::_BaseTypes qw/:all/',
                                 'MRO::Compat'] ~%]
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK "_closeLastNameSpace" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # close last namespace (root or scope)                                     ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: lastNamespaceArg0        namespace type: root or scope            ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ SWITCH lastNamespaceArg0 ~%]
    [%~ CASE 'root' ~%]
      [%~ CALL root.pop ~%]
    [%~ CASE 'scope' ~%]
      [%~ CALL scope.pop ~%]
    [%~ CASE ~%]
      [%~ THROW lastNamespaceArg0 "Bad argument: must be root or scope instead of " _ lastNamespaceArg0 ~%]  
  [%~ END ~%]
[%~ END ~%]

[%~ BLOCK "_printScopedname" ~%]
  [%~ # ######################################################################## ~%]
  [%~ # make sure a scoped name (our $XXX) is printed once                       ~%]
  [%~ #                                                                          ~%]
  [%~ # Input: scopednameArg0        scoped name                                 ~%]
  [%~ #        scopednameArg1        scoped name value                           ~%]
  [%~ #                                                                          ~%]
  [%~ # ######################################################################## ~%]
  [%~ currentFullyQualifiedScopedName = PROCESS _currentFullyQualifiedScopedName | trim ~%]
  [%~ yetPrinted = 0 ~%]
  [%~ TRY ~%]
    [%~ # Because of the strict mode this can generate an exception ~%]
    [%~ IF (scopednamePerscope.$currentFullyQualifiedScopedName.exists(scopednameArg0)) ~%]
      [%~ yetPrinted = 1 ~%]
    [%~ END ~%]
  [%~ CATCH ~%]
    [%~ yetPrinted = 0 ~%]
  [%~ END ~%]
  [%~ IF (yetPrinted == 0) ~%]
    [%~ scopednamePerscope.$currentFullyQualifiedScopedName.$scopednameArg0 = scopednameArg1 ~%]
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
our \$[% scopednameArg0 %] = [% scopednameArg1 %];
[%#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~%]
  [%~ ELSE ~%]
    [%~ IF (scopednamePerscope.$currentFullyQualifiedScopedName.$scopednameArg0 != scopednameArg1) ~%]
      [%~ THROW scopednameArg1 "Redefinition of scoped name to another value" ~%]
    [%~ END ~%]
  [%~ END ~%]
[%~ END ~%]
